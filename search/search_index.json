{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"carriers/","title":"All Boards","text":"<ul> <li> <p>SparkFun GNSS Flex pHAT</p> <p> </p> <p> Hookup Guide <p> Purchase from SparkFun  </p>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#board-alignment","title":"Board Alignment","text":"<p>The GNSS Flex system is a modular ecosystem designed around two 2x10-pin, 2mm pitch headers, so boards are pin-compatible for upgrades and easily swapped for repairs. Users simply, stack a SparkPNT GNSS Flex module onto the headers of its associated carrier board. The alignment of these boards is annotated with a triangle in the corner of the mating area.</p> <p></p> <p>The alignment and connection of a SparkPNT GNSS Flex module on top of a carrier board.</p>"},{"location":"hardware_assembly/#external-antenna","title":"External Antenna","text":"<p>In order to receive GNSS signals, users will need a compatible antenna. For the best performance, we recommend an active, L1/L2/L5/L6 GNSS antenna.</p> <ul> <li>External antennas can be connected through the U.FL connector on the GNSS Flex board.</li> <li>For a sturdier connection, there is a signal pass-through between the U.FL and SMA antenna connectors of the Flex carrier boards. Users can to bridge the U.FL connections of the boards to utilize the SMA connector for a GNSS antenna.</li> </ul> <p></p> <p>Attaching an antenna directly to the GNSS Flex board.</p> <p></p> <p>Bridging the U.FL connections to utilize the SMA connector on a carrier board.</p>"},{"location":"hardware_overview/","title":"Design Standards","text":""},{"location":"hardware_overview/#board-layout","title":"Board Layout","text":"<p>The boards of the GNSS Flex system have the following features:</p> <p></p> <p>Layout of the major components on the GNSS Flex modules.</p> <ol> <li> Alignment Indicator A small triangle at the corner of the board is used to indicate the board's alignment on the carrier board. </li> <li> GNSS Receiver Each variant of the SparkPNT GNSS Flex modules features a unique GNSS receiver. </li> <li> U.FL Connector The primary interface for connecting an external GNSS antenna. (Some GNSS modules may come packaged with a built-in ceramic antenna.) </li> <li> GNSS Flex Female Headers The GNSS Flex system is designed around two 2x10-pin, 2mm pitch headers used mate the two types of boards. A standardized pin layout, keeps the ecosystem pin-compatible for upgrades and allows board to be easily swapped for repairs. Depending on the capabilities of the GNSS receiver, these pins will breakout the USB, UART (x4), I<sup>2</sup>C, and SD card interfaces along with any PPS or event signals of the GNSS receiver. </li> </ol> <p></p> <p>Layout of the major components of GNSS Flex carrier boards.</p> <ol> <li> Alignment Indicator A small triangle in the corner of the GNSS Flex system's mating area is used to indicate the alignment for a GNSS Flex module on the carrier board. </li> <li> SMA Connector A more robust interface for connecting an external GNSS antenna to the GNSS Flex system. The signal is isolated and passed-through to the U.FL connector on the carrier board. </li> <li> U.FL Connector The signal for this connector is isolated and passed-through to the SMA connector on the carrier board. It is used for bridging the external antenna connection of the U.FL connector on GNSS Flex module to the SMA connector on the carrier board. </li> <li> GNSS Flex Male Headers The carrier boards host GNSS Flex modules on the two 2x10-pin, 2mm pitch male headers. A standardized pin layout, keeps the ecosystem pin-compatible for upgrades and allows board to be easily swapped for repairs. Depending on the capabilities of the GNSS receiver, these pins will breakout the USB, UART (x4), I<sup>2</sup>C, and SD card interfaces along with any PPS or event signals of the GNSS receiver. </li> <li> Status LED Often carrier boards will include status LEDs to indicate the board is powered, the RTK status, a PPS signal, and a GNSS fix. </li> <li> Other Features The designs of the carrier boards usually have a specific purpose; therefore, they will often include other features. (For more details, users can refer to the hardware information of the board they are interested in.) </li> </ol>"},{"location":"hardware_overview/#header-pins","title":"Header Pins","text":"<p>The GNSS Flex ecosystem is designed around two 2x10-pin, 2mm pitch headers used mate the two board types. Depending on the capabilities of the GNSS receiver on the GNSS Flex module, these pins breakout the USB, UART (x4), I<sup>2</sup>C, and SD card interfaces along with any PPS or event signals of the GNSS receiver.</p> <p></p> <p>The pin layout of the headers on the GNSS Flex boards; with each board's mating alignment highlighted in green.</p>"},{"location":"hardware_overview/#ufl-connectors","title":"U.FL Connectors","text":"<p>Depending on the SparkPNT GNSS Flex module, users will have two options for connecting an external GNSS antenna to their GNSS receiver.</p> <ul> <li>The GNSS Flex modules will usually come with a U.FL connector for external antenna.</li> <li>For a more robust interface, the GNSS Flex carrier boards will usually come with a U.FL connector that is bridged to a nearby SMA edge connector. Users simply need to jumper the U.FL connectors between the SparkPNT GNSS Flex module and the carrier board with a short U.FL cable.</li> </ul> <p></p> <p>Bridging the U.FL connections to utilize the SMA connector on a carrier board.</p>"},{"location":"modules/","title":"All Modules","text":"<ul> <li> <p>SparkPNT GNSS Flex Module - mosaic-X5</p> <p> </p> <p> Hookup Guide <p> Purchase from SparkFun  </p> <li> <p>SparkPNT GNSS Flex Module - LG290P</p> <p> </p> <p> Hookup Guide <p> Purchase from SparkFun  </p>"},{"location":"resources/","title":"Resources","text":""},{"location":"resources/#gnss-flex-modules","title":"GNSS Flex Modules","text":"<ul> <li> <p>mosaic-X5</p> <ul> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>Component Documentation<ul> <li> mosaic-X5 Datasheet</li> <li> mosaic-X5 Brochure</li> <li> Firmware Manual (v4.14.10.1)</li> </ul> </li> <li> Product Showcase</li> </ul> </li> <li> <p>LG290P</p> <ul> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>Component Documentation<ul> <li> Product Specifications</li> <li> Protocol Specification</li> <li> RTK Application Note</li> <li> Hardware Design</li> <li> Firmware Upgrade Guide</li> </ul> </li> <li> Product Showcase</li> </ul> </li> </ul>"},{"location":"resources/#carrier-boards","title":"Carrier Boards","text":"<ul> <li> <p>GNSS Flex pHAT</p> <ul> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>Design Specifications:<ul> <li>Design Requirements</li> <li>Mechanical Specifications</li> </ul> </li> <li> Product Showcase</li> <li> Hardware Repo</li> </ul> </li> </ul>"},{"location":"resources/#sparkfun-logo-additional-resources","title":"SparkFun logo Additional Resources","text":"<ul> <li> SparkFun Technical Assistance</li> <li> GitHub Repository</li> </ul>"},{"location":"software_overview/","title":"Software Overview","text":""},{"location":"software_overview/#manufacturer-software","title":"Manufacturer Software","text":"<p>The software requirements of the GNSS Flex modules are usually specific to the GNSS receiver on the board. Below are general software resources that might be useful; however, users should refer to the GNSS Flex Modules section for details on their specific board.</p> <ul> <li> <p>Septentrio</p> <p>On Windows &amp; Linux platforms, Septentrio provides the RxTools software suite for their GNSS products:</p> <ul> <li>Software Page</li> <li>Download &amp; User Manual</li> <li>Tutorial Videos</li> </ul> </li> <li> <p>Quectel</p> <p>On Windows platforms, Quectel provides the QGNSS (v2.0) software application for their GNSS products:</p> <ul> <li>Download &amp; User Manual</li> <li>GitHub Repository</li> </ul> </li> </ul>"},{"location":"software_overview/#third-party-software","title":"Third-Party Software","text":"<p>In addition to any software provided by the manufacturers, there are a variety of third-party software options. The software implementation may even be unique to the available interfaces from an associated carrier board.</p> <ul> <li> <p>PyGPSClient</p> <p>The <code>PyGPSClient</code> Python package is a graphical tool for evaluating the basic performance of GNSS receivers and is compatible with most of the major operating systems. The application parses and extrapolates a variety of data from the UART interface of GNSS receivers; with integrated support for the NMEA, UBX, RTCM, NTRIP, and SPARTN protocols. All GNSS information is then displayed neatly within its GUI for users to access or utilize.</p> <ul> <li>PyPI - Python Package</li> <li>User Manual</li> <li>GitHub Repository</li> </ul> </li> </ul>"},{"location":"system_overview/","title":"System Overview","text":""},{"location":"system_overview/#gnss-flex-system","title":"GNSS Flex System","text":"<p>The GNSS Flex system is designed to be modular with a standardized pin layout that keeps the ecosystem pin-compatible for upgrades and allows boards to be easily swapped for repairs. The ecosystem is comprised of two boards, which mate through two 2x10-pin, 2mm pitch headers.</p> <p> </p> <p>Attaching a GNSS Flex module to a GNSS Flex carrier board.</p> Manipulate 3D Model Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p>The SparkPNT GNSS Flex modules function as plug-in boards that feature different GNSS receivers. They are designed to mate with carrier boards for various purposes; such as a breakout board, Raspberry Pi pHAT, SparkPNT product line, etc.</p>"},{"location":"system_overview/#board-variants","title":"Board Variants","text":"<p>Below, are two generic examples of a GNSS Flex module and carrier board.</p> <ul> <li> <p>GNSS Flex Module</p> <p> </p> <p> All GNSS Flex Modules </p> </li> <li> <p>GNSS Flex \"Carrier\" Board</p> <p> </p> <p> All GNSS Flex Carrier Boards </p> </li> </ul>"},{"location":"system_overview/#ecosystem-boards","title":"Ecosystem Boards","text":"<p>Below, are all the available GNSS Flex boards in our ecosystem.</p> <ul> <li> <p>SparkPNT GNSS Flex Module - mosaic-X5</p> <p> </p> <p> Hookup Guide <p> Purchase from SparkFun  </p> <li> <p>SparkPNT GNSS Flex Module - LG290P</p> <p> </p> <p> Hookup Guide <p> Purchase from SparkFun  </p> <li> <p>SparkFun GNSS Flex pHAT</p> <p> </p> <p> Hookup Guide <p> Purchase from SparkFun  </p>"},{"location":"system_overview/#section-topics","title":"Section Topics","text":"<p>This guide is divided into three sections:</p> <ul> <li>The Ecosystem Overview section describes the overall GNSS Flex system and its primary components.</li> <li>The GNSS Flex Modules and Carrier Boards sections detail each of the specific boards in the ecosystem and how they operate.</li> <li>In the Resources and Support sections, users can find the design files (KiCad files &amp; schematic), relevant documentation (datasheets, white papers, etc.) and other helpful links on the Resources page. Lastly, the Troubleshooting page includes helpful tips and instructions for how to receive technical support from SparkFun.</li> </ul>"},{"location":"troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p> <p></p>"},{"location":"SparkFun_GNSS_Flex_pHAT/","title":"Index","text":"<p>Placeholder file for index redirect functionality.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/","title":"Hardware Assembly","text":"Raspberry Pi - Specific Instructions <p>The instructions below are specific to the Raspberry Pi and similar style SBCs. For other platforms, users should take into account the mechanical requirements of the SBC they are utilizing. For example, when interfacing the Nvidia Jetson Orin Nano, the pHAT will extend outside of the Jetson's footprint and can't be secured to the base.</p> <p> Setting up the GNSS Flex pHAT kit with a Nvidia Jetson Orin Nano. </p> Kit Components <p>Below, are the minimum parts that users will need to assemble the GNSS Flex pHAT on a Raspberry Pi or similar SBC.</p> <p> The accessories included in addition to the GNSS Flex module, as part of the GNSS Flex pHAT kit. </p> <p>Parts List</p> <ul> <li>x1 - SparkFun GNSS Flex pHAT</li> <li>x1 - Tall GPIO Female Headers - 2x20 Pin</li> <li>x1 - 50mm U.FL to U.FL Cable</li> <li>x4 - Aluminum Hex Standoff<ul> <li>Thread: M2.5-0.45; Length: 16mm</li> </ul> </li> <li>x8 - Phillips Machine Screw<ul> <li>Thread: M2.5-0.45x8mm</li> </ul> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#external-antenna","title":"External Antenna","text":"<p>In order to receive GNSS signals, users will need a compatible antenna. For the best performance, we recommend an active, L1/L2/L5/L6 GNSS antenna.</p> <p></p> <p>Connecting an antenna to the GNSS Flex pHAT.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#connection-options","title":"Connection Options","text":"<p>There are two options for connecting an external antenna to a GNSS Flex module:</p> <ul> <li>An external antennas can be connected through the U.FL connector on the GNSS Flex board.</li> <li>However, for a sturdier connection, there is a signal pass-through between the U.FL and SMA antenna connectors on the GNSS Flex pHAT. To utilize the SMA connector, user can bridge the U.FL connections of the boards with a U.FL cable.</li> </ul> <p></p> <p>Attaching an antenna directly to the GNSS Flex module with an adapter cable.</p> <p></p> <p>Bridging the U.FL connections of the boards, to utilize the SMA connector on the GNSS Flex pHAT.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#antenna-bridge","title":"Antenna Bridge","text":"<p>The antenna bridge on the GNSS Flex pHAT can be utilized to connect an external antenna to the SMA connector. For the connection to work, an U.FL cable needs to bridge the antenna connection from the GNSS Flex module to the GNSS Flex pHAT. Due to the space constraint, we recommend connecting the U.FL cable to the GNSS Flex pHAT before attaching the GNSS Flex module to the pHAT.</p> <p></p> <p>Step 1 - Connect the U.FL cable to the GNSS Flex pHAT.</p> <p></p> <p>Step 2 - Attach the GNSS Flex module to the pHAT.</p> <p></p> <p>Step 3 - Connect the other end of the U.FL cable to the GNSS Flex module.</p> <p></p> <p>A U.FL cable bridging the antenna connection between the boards.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#attach-module","title":"Attach Module","text":"<p>The GNSS Flex system is a modular ecosystem designed around two 2x10-pin, 2mm pitch headers, so boards are pin-compatible for upgrades and easily swapped for repairs. Users simply, stack a SparkPNT GNSS Flex module onto the headers of its associated carrier board.</p> <p>SMA Connector</p> <p>When bridging the antenna connection to the SMA connector of the GNSS Flex pHAT, we recommend attaching the U.FL cable to the pHAT before the GNSS Flex module.</p> <p></p> <p>Attaching a GNSS FLex module to the GNSS Flex pHAT.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#board-alignment","title":"Board Alignment","text":"<p>The alignment indicator for mating these boards, is annotated with a triangle in the corner of the mating area.</p> <p></p> <p>The alignment and connection of a SparkPNT GNSS Flex module on top of a carrier board.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#assemble-phat","title":"Assemble pHAT","text":"<p>Before assembling the mechanical hardware for the GNSS Flex pHAT, users should consider how the hardware will interface with their Raspberry Pi or other SBC.</p> <ul> <li>Attach the extension header to the Raspberry Pi or other single-board computer</li> <li>Attach the screws and standoffs to the SparkFun GNSS Flex pHAT<ol> <li>To make things easier, we recommend attaching the standoffs to the pHAT first</li> <li>Once attached, users can stack the pHAT onto the Raspberry Pi or other single-board computer</li> <li>For a more permanent installation, users can also secure the pHAT to the SBC from the base</li> </ol> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#header-extension","title":"Header Extension","text":"<p>When assembling the GNSS Flex pHAT, users should utilize the extension header that best suits their needs.</p> <p></p> <p>Attaching the extension header to the GPIO pins on a Raspberry Pi.</p> <p>Stacking Multiple HATs</p> <p> Using different extension headers to stack multiple HATs on a Raspberry Pi. </p> <p>Selecting an Extension Header</p> <ul> <li>Tall GPIO Female Headers - 2x20 Pin<ul> <li>These are the same extension headers included in our GNSS Flex pHAT kits.</li> <li>These headers are just long enough to attach a Raspberry Pi HAT/pHAT and are great if you are looking to maximize the amount of airflow beneath the pHAT.</li> </ul> </li> <li>Extended GPIO Female Header - 2x20 Pin (16mm/7.30mm)<ul> <li>These headers offer the most structural support and are long enough for stacking multiple HATs, but with the spacers it's just a little too tall to match the height of the standoffs in the kit.</li> </ul> </li> <li>Extended GPIO Female Header - 2x20 Pin (13.5mm/9.80mm)<ul> <li>These headers are great if users want to stack multiple Raspberry Pi HAT/pHATs.</li> </ul> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#standoffs","title":"Standoffs","text":"<p>The standoffs included in the GNSS Flex pHAT kits offer structural support and ventilation space, for attaching the board to a Raspberry Pi. However, an extension header must be used in order to maintain the pin connections of the 40-pin GPIO header from the Raspberry Pi.</p> <p>When connecting the standoffs, we recommend attaching them to the GNSS Flex pHAT first. However, users should leave the screws a little loose to account for minor tolerances in the mechanical assembly.</p> <p></p> <p>Attaching the standoffs to the GNSS Flex pHAT with a screwdriver.</p> <p></p> <p>A more effective method for initially connecting the standoffs.</p> <p>Once users have attached the standoffs to the GNSS Flex pHAT, it can be stacked onto the GPIO header of the Raspberry Pi and secured to the board.</p> <p></p> <p>Attaching GNSS Flex pHAT to the extension header on the GPIO pins on a Raspberry Pi.</p> <p></p> <p>Securing the standoffs to the base of the Raspberry Pi.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#usb-connector","title":"USB Connector","text":"<p>If the GNSS Flex module has the capability, a USB-C connector is provided on the GNSS Flex pHAT to interface with the GNSS receiver. However, depending on the software support of the GNSS receiver, users can either interface with the GNSS receiver directly from the Raspberry Pi or externally from another computer.</p> <p></p> <p>Connecting the USB interface of the GNSS Flex module directly to the Raspberry Pi.</p> <p></p> <p>Connecting the USB interface of the GNSS Flex module to an external computer.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_assembly/#sd-card-slot","title":"SD Card Slot","text":"<p>If the GNSS Flex module has the capability, an SD card slot is provided on the GNSS Flex pHAT for data logging.</p> <p></p> <p>Jumpers on the bottom of the GNSS Flex pHAT.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/","title":"Hardware Overview","text":"<p>pHAT (not HAT+)</p> <p>This is product does not completely meet Raspberry Pi's HAT+ specification.</p> <ul> <li>An identification EEPROM is not populated on the board; however, we do provide a footprint for future use.</li> <li>Without an ID EEPROM, a Raspberry Pi cannot automatically identify this board. Therefore, users will need to manually install any software and provide configurations for the hardware connections.</li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun GNSS Flex pHAT SKU: GPS-28137 <p> </p> <p> Purchase from SparkFun  </p> <li> <p>The SparkFun GNSS Flex pHAT is a Raspberry Pi pHAT that functions as a carrier board for our SparkPNT GNSS Flex modules. With pre-soldered headers, no soldering is required to stack the pHAT on the headers of a Raspberry Pi, NVIDIA Jetson Nano, Google Coral, or other single-board computer with a similar 40-pin header.</p> <p>The GNSS Flex pHAT also comes populated with two sets of 2x10 pin, 2mm pitch male headers for attaching a GNSS Flex module. With these headers, the GNSS Flex system is designed to be modular so that boards are pin-compatible for upgrades and can be easily swapped for repairs. Depending on the capabilities of the GNSS Flex module that is connected, these pins will breakout the USB, UART (x4), I<sup>2</sup>C, and SD card interfaces for the GNSS receiver along with any PPS or event signals, using a standardized pin out.</p> </li>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#design-files","title":"Design Files","text":"<ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP File</li> <li> Board Dimensions:</li> </ul> <p></p> <p>Hardware Included w/ Kit</p> <ul> <li>x1 - SparkPNT GNSS Flex Module</li> <li>x1 - Tall GPIO Female Headers - 2x20 Pin</li> <li>x1 - 50mm U.FL to U.FL Cable</li> <li>x4 - Aluminum Hex Standoff<ul> <li>Thread: M2.5-0.45; Length: 16mm</li> </ul> </li> <li>x8 - Phillips Machine Screw<ul> <li>Thread: M2.5-0.45x8mm</li> </ul> </li> </ul> </li> <li> 3D ModelDimensions <p> </p> Manipulate 3D Model Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p> Dimensions of the GNSS Flex pHAT. </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#board-layout","title":"Board Layout","text":"<p>The GNSS Flex system is designed around two 2x10-pin, 2mm pitch headers used mate the two types of boards. A standardized pin layout, keeps the ecosystem pin-compatible for upgrades and allows board to be easily swapped for repairs. Depending on the capabilities of the GNSS receiver, these pins will breakout the USB, UART (x4), I<sup>2</sup>C, and SD card interfaces along with any PPS or event signals of the GNSS receiver.</p> <p></p> <p>Layout of the major components of the GNSS Flex pHAT.</p> <p>The GNSS Flex pHAT has the following features:</p> <ol> <li> 40-pin GPIO Header The 2x20 pin, 0.1\" pitch female header for stacking the pHAT on top the Raspberry Pi's 40-pin GPIO header. </li> <li> GNSS Flex Headers Two sets of 2x10 pin, 2mm pitch female headers for connecting a GNSS Flex module. </li> <li> Alignment Indicator Used to indicate the board alignment of a GNSS Flex module. </li> <li> Antenna Bridge U.FL and SMA connectors for attaching an external GNSS antenna. </li> <li> Status LEDs Four status indication LEDs for the pHAT and attached GNSS Flex module. </li> <li> USB-C Connector A USB connector that breaks out the USB interface of an attached GNSS Flex module. </li> <li> SD Card Slot Depending on the capabilities of the GNSS Flex module, a \u00b5SD card slot for data logging. </li> <li> Qwiic Connector A Qwiic connector for attaching peripheral devices to the I<sup>2</sup>C bus. </li> </ol>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#antenna-bridge","title":"Antenna Bridge","text":"<p>The SMA connector provides users with a more robust interface for attaching an external GNSS antenna. With the U.FL and SMA connectors bridged together and their ground plane isolated from the rest of the board, this allows users to pass the antenna connection from the GNSS Flex module to the GNSS Flex pHAT.</p> <p></p> <p>An SMA antenna bridge on the GNSS Flex pHAT, which provides a more robust connection.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#40-pin-gpio-header","title":"40-pin GPIO Header","text":"<p>In its simplest form, the SparkFun GNSS Flex pHAT sits atop a Raspberry Pi interfacing with its 40-pin header.</p> <p></p> <p>The 40-pin female GPIO header for attaching to an SBC.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#interfaces","title":"Interfaces","text":"<p>The following interfaces and signals of the GNSS Flex system are connected to the 40-pin female GPIO header of the GNSS Flex pHAT. Below, are tables detailing the pin connections for each interface.</p> <p>UART Numbering</p> <p>Please note that the UART numbers (UART1 - UART4) listed below follow the GNSS Flex Module UART numbering scheme. The mosaic-X5 supports four hardware UARTs (COM1 - COM4). The LG290P supports only three (UART1 - UART3).</p> <p>Please also note that the UART numbers on Raspberry Pi will be different, as will the <code>/dev/ttyAMA</code> device names. There is not a 1:1 mapping between the GNSS Flex UART numbers and the Raspberry Pi UART numbers. The Raspberry Pi UART numbers also vary from model to model; the Pi 5 and Pi 4 numbering is different for example.</p> UARTI<sup>2</sup>CPPSEvent UART1UART2UART3UART4 GNSS Flex Pin Raspberry Pi GPIO <code>RX1</code> <code>GPIO14</code> (<code>TX</code>) <code>TX1</code> <code>GPIO15</code> (<code>RX</code>) <p>Highlighted in Green</p> GNSS Flex Pin Raspberry Pi GPIO <code>RX2</code> <code>GPIO08</code> (<code>CE0</code>) <code>TX2</code> <code>GPIO09</code> (<code>POCI0</code>) <code>RTS2</code> <code>GPIO10</code> (<code>PICO0</code>) <code>CTS2</code> <code>GPIO11</code> (<code>SLK0</code>) <p>Highlighted in Blue</p> GNSS Flex Pin Raspberry Pi GPIO <code>RX3</code> <code>GPIO04</code> (<code>GCLK0</code>) <code>TX3</code> <code>GPIO05</code> (<code>GCLK1</code>) <code>RTS3</code> <code>GPIO06</code> (<code>GCLK2</code>) <code>CTS3</code> <code>GPIO07</code> (<code>CE1</code>) <p>Highlighted in Yellow</p> GNSS Flex Pin Raspberry Pi GPIO <code>RX4</code> <code>GPIO12</code> (<code>PMW0</code>) <code>TX4</code> <code>GPIO13</code> (<code>PMW1</code>) <p>Highlighted in Red</p> <p> The pin connections of the UART interface, from the GNSS Flex system to the 40-pin female GPIO header. </p> GNSS Flex Pin Raspberry Pi GPIO <code>SDA</code> <code>GPIO02</code> (<code>SDA</code>) <code>SCL</code> <code>GPIO03</code> (<code>SCL</code>) <p> The pin connections of the I<sup>2</sup>C interface, from the GNSS Flex system to the 40-pin female GPIO header. </p> GNSS Flex Pin Raspberry Pi GPIO <code>PPS1</code> <code>GPIO22</code> <code>PPS2</code> <code>GPIO23</code> <p> The pin connections of the PPS signals, from the GNSS Flex system to the 40-pin female GPIO header. </p> GNSS Flex Pin Raspberry Pi GPIO <code>EVENTA</code> <code>GPIO24</code> <code>EVENTB</code> <code>GPIO25</code> <p> The pin connections of the event triggers, from the GNSS Flex system to the 40-pin female GPIO header. </p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#leds","title":"LEDs","text":"<p>There are four status LEDs on the GNSS Flex pHAT:</p> <p></p> <p>The status LED indicators on the GNSS Flex pHAT.</p> <ul> <li><code>PWR</code> - Power (Red)<ul> <li>Turns on once power is supplied to the board from the 40-pin GPIO header</li> </ul> </li> <li><code>PPS</code> - Pulse-Per-Second (Yellow)<ul> <li>Indicates when there is a pulse-per-second signal from the GNSS Flex module</li> </ul> </li> <li><code>RTK</code> - RTK (White)<ul> <li>Usually indicates when an RTK fix has been established or when the correct RTCM data is being received by the GNSS Flex module</li> </ul> </li> <li><code>PVT</code> - PVT (Blue)<ul> <li>Usually, indicates when an GNSS lock or a position fix has been established by the GNSS Flex module</li> </ul> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#usb-connector","title":"USB Connector","text":"<p>Depending on the capabilities of the GNSS receiver, the USB connector breaks out the USB interface from the GNSS Flex module.</p> <p></p> <p>The USB connector on the GNSS Flex pHAT.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#sd-card-slot","title":"SD Card Slot","text":"<p>Depending on the capabilities of the GNSS receiver, the \u00b5SD card slot can be used for data logging.</p> <p></p> <p>The SD card slot on the GNSS Flex pHAT.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>The Qwiic connector attached to the primary I<sup>2</sup>C interface of the 40-pin GPIO header.</p> <p></p> <p>The Qwiic connector on the GNSS Flex pHAT.</p> What is Qwiic? <p> </p> <p>The Qwiic connect system is a solderless, polarized connection system that allows users to seamlessly daisy chain I<sup>2</sup>C boards together. Play the video, to learn more about the Qwiic connect system or click on the banner above to learn more about Qwiic products.</p> <p> </p> <p>Features of the Qwiic System</p> No SolderingPolarized ConnectorDaisy Chain-able <p> </p> <p>Qwiic cables (4-pin JST) plug easily from development boards to sensors, shields, accessory boards and more, making easy work of setting up a new prototype.</p> <p> </p> <p>There's no need to worry about accidentally swapping the <code>SDA</code> and <code>SCL</code> wires on your breadboard. The Qwiic connector is polarized so you know you\u2019ll have it wired correctly every time.</p> <p>The part numbers for the PCB connector is <code>SM04B-SRSS</code> (Datasheet) and the mating connector on the cables is <code>SHR04V-S-B</code>; or an equivalent 1mm pitch, 4-pin JST connection.</p> <p> </p> <p>It\u2019s time to leverage the power of the I<sup>2</sup>C bus! Most Qwiic boards will have two or more connectors on them, allowing multiple devices to be connected.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are twenty-three jumpers on the GNSS Flex pHAT:</p> <p></p> <p>Jumpers on the top of the GNSS Flex pHAT.</p> <p></p> <p>Jumpers on the bottom of the GNSS Flex pHAT.</p> <ul> <li>The <code>SHLD</code> jumper can be cut to isolate the shielding of the USB-C connector from the ground plane of the board.</li> <li>All the jumpers labeled with numbers, can be cut tp disconnect a signal from the GNSS Flex header to the associated Raspberry Pi GPIO pin (refer to the 40-pin GPIO Header section).</li> <li>All the jumpers next to the status LEDs, can be cut to disable the associated LED.</li> <li>There are two <code>I2C</code> jumpers; one next to the Qwiic connector and one next to the unpopulated EEPROM footprint.<ul> <li>The <code>I2C</code> jumper next to the Qwiic connector, can be cut to disconnect the two 3.9k\u03a9 pull-up resistors for that I<sup>2</sup>C bus.</li> <li>The <code>I2C</code> jumper next to the EEPROM footprint, can be closed to connect two 3.9k\u03a9 pull-up resistors if an EEPROM is populated.</li> </ul> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/resources/","title":"Resources","text":""},{"location":"SparkFun_GNSS_Flex_pHAT/resources/#product-resources","title":"Product Resources","text":"<ul> <li>Product Pages<ul> <li>SparkFun logo SparkFun GNSS Flex pHAT</li> <li>SparkFun logo SparkFun GNSS Flex pHAT - mosaic-X5</li> <li>SparkFun logo SparkFun GNSS Flex pHAT - LG290P</li> </ul> </li> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>Component Documentation<ul> <li> HAT+ Specification</li> <li> HAT+ Wordmark Guidelines</li> </ul> </li> <li>PyGPSClient Software<ul> <li> GitHub Repository</li> <li> Installation Instructions</li> <li> PyPI Project</li> </ul> </li> <li> Product Showcase</li> <li> Hardware Repo</li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/resources/#additional-resources","title":"Additional Resources","text":"<ul> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/","title":"Software Overview","text":"<p>Warning - Resource Requirements</p> <p>When choosing a SBC, please be aware of any resource requirements.</p> <p>For example, the mosaic-X GNSS Flex module provides an internal web server, which can be utilized to change its configuration settings. On platforms such as the Raspberry Pi, using the latest Raspberry Pi OS (Bookworm, at the time of writing), the Chromium web browser requires a good amount of RAM to run smoothly. Therefore, some of the older Raspberry Pi models become extremely sluggish to work with.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#supported-platforms","title":"Supported Platforms","text":"<p>There are dozens of single board computers (SBCs) to choose from; we have tested this hardware with the Raspberry Pi and Nvidia platforms using their latest OS distributions (Bookworm and JetPack 6.2). To use the SparkFun GNSS Flex pHAT on other platforms, the SBC must have a compatible 40-pin GPIO header that follows Raspberry Pi's standardized pin layout.</p> Tip - Hardware Recommendations <p>We highly recommend using the Raspberry Pi 4B/5 and latest Nvidia Jetson Orin Nano. While users are free to use other boards or platforms, we cannot guarantee the functionality of our recommended software for those instances.</p> <ul> <li>Jetson Orin Nano (super) - Tested and verified</li> <li>Jetson Nano (4GB) - Tested and verified</li> <li>Pi 5 - Tested and verified with 4GB version</li> <li>Pi 4B - Tested and verified with 2GB and 4GB versions; would recommend avoiding the 1GB version due to the web browser requirements</li> <li>Pi Zero 2W - Tested and verified; would recommend avoiding due to the web browser requirements</li> <li>Pi 3A+ - Tested and verified; would recommend avoiding due to the web browser requirements</li> <li>Pi 3B+ - Tested and verified</li> <li>Pi 3B - Tested and verified; would recommend avoiding due to limitations in processing power</li> <li>Pi Zero/Zero W - Avoid</li> </ul> <p>PyGPSClient</p> <p>The <code>PyGPSClient</code> software that we recommend below, provides a nice graphical user interface for the GNSS Flex modules. However, as with any GUI, it requires a decent amount of computational resources to run smoothly.</p> <ul> <li>Users can try using the Pi Zero 2W, but just be aware that we noticed a small degree of lag in the GUI.</li> <li>Just avoid using the Pi 3B (or older) and Pi Zero/Zero W models.</li> </ul> <p>mosaic-X5 Web Server</p> <p>The mosaic-X GNSS Flex module provides an internal web server, which can be utilized to change its configuration settings. However, when using the latest Raspberry Pi OS (Bookworm), the Chromium browser requires a decent amount of RAM to function. For this reason, we recommend using any Pi 4B or later model, with at least 2GB of RAM.</p> <p>Save yourself the trouble and just avoid using the following Raspberry Pi boards:</p> <ul> <li>Users can try using the Pi 3B+ model, but it will require a significant amount of patience waiting for a web page to load. The web page needs to reload each time users change a setting; and again, to save the settings.</li> <li>Just avoid using the Pi 3B/A+ (or older) and Pi Zero/Zero W/Zero 2W models</li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#getting-started-with-your-sbc","title":"Getting Started with your SBC","text":"<p>For users unfamiliar with the following platforms, we have linked additional resources below:</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#raspberry-pi-os","title":"Raspberry Pi OS","text":"<ul> <li>Raspberry Pi Imager</li> <li>Operating System Images</li> <li>Raspberry Pi Documentation<ul> <li>Getting Started </li> <li>Raspberry Pi OS</li> <li>Configurations</li> </ul> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#nvidia-jetpack-sdk","title":"Nvidia JetPack SDK","text":"<ul> <li>JetPack SDK<ul> <li>NVIDIA SDK Manager Documentation</li> </ul> </li> <li>Getting Started with Jetson Developer Kits<ul> <li>Jetson Orin Nano Super Developer Kit<ul> <li>User Guide</li> <li>Getting Started Guide</li> </ul> </li> <li>Jetson AGX Orin Developer Kit<ul> <li>User Guide</li> <li>Getting Started Guide</li> </ul> </li> </ul> </li> <li>Support<ul> <li>Jetson FAQ</li> <li>Jetson Linux Developer Guide</li> <li>Jetson Community Resources</li> <li>Jetson Projects Forum</li> </ul> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#update-software","title":"Update Software","text":"<p>Once users have got their SBC up and running, ensure that it is utilizing the latest software. Run the following commands to update and upgrade any installed packages:</p> <pre><code>sudo apt update\nsudo apt full-upgrade\nsudo apt autoremove --purge &amp;&amp; sudo apt clean\n</code></pre> <p>Info</p> <p>Advanced Package Tool (APT) is the recommended way to install, update, and remove software in Raspberry Pi OS. Users can access APT through the <code>apt</code> CLI.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#enable-serial-interface","title":"Enable Serial Interface","text":"<p>Depending on the SBC platform, users may need to enable access to the serial interface from the 40-pin GPIO header for the operating system.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#configuration-settings","title":"Configuration Settings","text":"<p>In the Raspberry Pi OS, users can enable access to the serial interface through the <code>raspi-config</code> configuration tool. The tool can be utilized through either the CLI or desktop GUI. To change the configuration settings, users will need to navigate through the Interface options &gt; Serial port menus and enable the serial port.</p> Note <p>Not all of the advanced configuration options from the CLI are available in the Raspberry Pi Configuration GUI.</p> <p>Disabling the Linux Serial Console</p> <p>On the Pi 3/4/5/Zero 2W, users should keep access to the shell disabled from the serial interface.</p> <p>Is PyGPSClient disconnecting?</p> <p>If PyGPSClient disconnects from the serial port after a few seconds, you probably still have the Login Shell enabled. Use <code>raspi-config</code> to ensure: the serial port hardware is enabled; and that the login shell is not accessible.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#additional-uarts","title":"Additional UARTs","text":"<p>The GNSS Flex pHAT supports up to four hardware UART connections. On Raspberry Pi, it may be necessary to enable the three additional UARTs manually. On Raspberry Pi 5, the additional ports usually appear as <code>/dev/ttyAMA2</code>, <code>/dev/ttyAMA3</code> and <code>/dev/ttyAMA4</code>. In a Terminal Window, type <code>ls /dev/tty*</code> to list all the available ports. If the ports are not enabled, you can enable them by editing <code>/boot/firmware/config.txt</code>:</p> <ul> <li> <p>Edit <code>/boot/firmware/config.txt</code></p> <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre> </li> <li> <p>Add these three lines to the end of the file</p> <pre><code>dtoverlay=uart2\ndtoverlay=uart3\ndtoverlay=uart4\n</code></pre> </li> <li> <p>Save the file using <code>crtl-X</code> and select <code>Save</code></p> </li> <li> <p>Reboot the Pi with <code>sudo reboot</code></p> </li> </ul> <p>UART Numbering</p> <p>Please note that the UART numbers (UART1 - UART4) listed in the GNSS Flex Module hardware documentation refer to the GNSS UART numbering scheme. The mosaic-X5 supports four hardware UARTs (COM1 - COM4). The LG290P supports only three (UART1 - UART3).</p> <p>Please also note that the UART numbers on Raspberry Pi will be different, as will the <code>/dev/ttyAMA</code> device names. There is not a 1:1 mapping between the Flex UART numbers and the Raspberry Pi UART numbers. The Raspberry Pi UART numbers also vary from model to model; the Pi 5 and Pi 4 numbering is different for example. On Pi 4, it is necessary to enable UART3 - UART5.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#user-privileges","title":"User Privileges","text":"<p>To access the serial port on most Linux platforms, users will need to be a member of the <code>tty</code> and/or <code>dialout</code> groups. This can be configured with either the <code>adduser</code> or <code>usermod</code> utilities.</p> <ul> <li> <p><code>adduser</code> Utility</p> <pre><code>sudo adduser &lt;username&gt; &lt;groupname&gt;\n</code></pre> </li> <li> <p><code>usermod</code> Utility</p> <pre><code>sudo usermod -aG &lt;groupname&gt; &lt;username&gt;\n</code></pre> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#pygpsclient","title":"PyGPSClient","text":"<p>PyGPSClient is a free, open-source graphical interface for GNSS receiver testing and evaluation. We recommend the software for the Raspberry Pi and other SBCs because it is supported on multiple operating systems. It works very well on desktop machines too - if you have Python installed.</p> <p>System Requirements</p> <p>The installation requires an internet connection to download the Python package from PyPI. Additionally, users will also need administrative privileges (or root access <code>sudo</code>) for the installation and access the hardware connections. Other than this, no special privileges are required.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#installation","title":"Installation","text":"<p>There are a variety of installation methods detailed in the GitHub repository's <code>README.md</code> file. However, we recommend utilizing either the <code>pip</code> installation method or installation shell script.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#shell-script","title":"Shell Script","text":"<p>Installation instructions for the example shell scripts are detailed in the GitHub repository's <code>README.md</code> file.</p> <p>Example Installation Script</p> <code>pygpsclient_debian_install.sh</code> <pre><code>#!/bin/bash\n\n# Bash shell script to install PyGPSClient on 64-bit Debian-based\n# Linux environments, including Raspberry Pi and Ubuntu.\n#\n# Change shebang /bin/bash to /bin/zsh if running from zsh shell.\n# NB: NOT for use on Windows or MacOS!\n#\n# Remember to run chmod +x pygpsclient_debian_install.sh to make this script executable.\n#\n# Full installation instructions:\n# https://github.com/semuconsulting/PyGPSClient\n#\n# Created by semuadmin on 20 Sep 2023.\n# \n# exit on error\nset -e\n\nPYVER=\"$(python3 -c 'import sys; print(\".\".join(map(str, sys.version_info[:2])))')\"\n\necho \"Installed Python version is $PYVER\"\n\necho \"PyGPSClient will be installed at $HOME/pygpsclient/bin\"\n\necho \"Installing dependencies...\"\nsudo apt install python3-pip python3-tk python3-pil python3-pil.imagetk \\\n     libjpeg-dev zlib1g-dev tk-dev python3-rasterio\n\necho \"Setting user permissions...\"\nsudo usermod -a -G tty $USER\n\necho \"Creating virtual environment...\"\ncd $HOME\npython3 -m venv pygpsclient\nsource pygpsclient/bin/activate\npython3 -m pip install --upgrade pip pygpsclient\ndeactivate\n\necho \"Adding desktop launch icon...\"\ncat &gt; $HOME/.local/share/applications/pygpsclient.desktop &lt;&lt;EOF\n[Desktop Entry]\nType=Application\nTerminal=false\nName=PyGPSClient\nIcon=$HOME/pygpsclient/lib/python$PYVER/site-packages/pygpsclient/resources/pygpsclient.ico\nExec=$HOME/pygpsclient/bin/pygpsclient\nEOF\n\necho \"Adding directory to PATH...\"\nBASHPROF1=$HOME/.profile\nBASHPROF2=$HOME/.bash_rc\nZSHPROF1=$HOME/.zprofile\nZSHPROF2=$HOME/.zshrc\nif test -f $BASHPROF1\nthen\nPROF=$BASHPROF1\nelif test -f $BASHPROF2\nthen\nPROF=$BASHPROF2\nfi\nif test -f $ZSHPROF1\nthen\nPROF=$ZSHPROF1\nelif test -f $ZSHPROF2\nthen\nPROF=$ZSHPROF2\nfi\nsed -i '$a# Path to PyGPSClient executable\\nexport PATH=\"$HOME/pygpsclient/bin:$PATH\"' $PROF\nsource $PROF # this will throw an error if running as bash script in zsh shell\n\necho \"Installation complete\"\n</code></pre>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#pip-installation","title":"<code>pip</code> Installation","text":"<p>Installation instructions for the <code>pip</code> installation method are detailed in the GitHub repository's <code>README.md</code> file. Depending on how Python is installed on the computer, one of the following commands should allow users to install the software:</p> Jetson - Install <code>pip</code> <p>For the Jetson Orin Nano development kit, users will need to install <code>pip</code> before following the installation steps below.</p> <pre><code>sudo apt install python3-pip\n</code></pre> Pi OS - Bookworm <p>Starting with Raspberry Pi OS Bookworm, users can no longer install Python packages, via <code>pip</code>, directly into the system version of Python. Instead, Python packages must be installed into a Python virtual environment (<code>venv</code>); a container where third-party modules can be safely installed without interfering with the system version of Python.</p> <pre><code>python3 -m pip install pygpsclient\n</code></pre> <pre><code>pip3 install pygpsclient\n</code></pre>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#virtual-environment","title":"Virtual Environment","text":"<p>With the latest version of the Raspberry Pi OS, Bookworm, users will need to follow to the instructions for utilizing a virtual environment.</p> <p>Warning</p> <p>Due to the nature of utilizing a virtual environment, these instructions will not function as a system wide installation. (i.e. You'll only be able to access the application with the <code>&lt;user&gt;</code>, used to install the application in their virtual environment.)</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#create-a-virtual-environment","title":"Create a Virtual Environment","text":"<p>To create a virtual environment, in a specific <code>&lt;directory&gt;</code>:</p> <pre><code>python3 -m venv &lt;directory&gt;\n</code></pre> <p>Example</p> <p>Creating a virtual environment in the <code>env</code> directory:</p> <pre><code>python3 -m venv env\n</code></pre>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#activate-the-virtual-environment","title":"Activate the Virtual Environment","text":"<p>To activate the virtual environment that was created in the <code>&lt;directory&gt;</code>:</p> <pre><code>source &lt;directory&gt;/bin/activate\n</code></pre> <ul> <li> <p>Install the Application in the Virtual Environment</p> <p>Once inside the virtual environment, users can install the Python package with the normal <code>pip</code> installation command:</p> <pre><code>python3 -m pip install pygpsclient\n</code></pre> </li> <li> <p>Run the Application in the Virtual Environment</p> <p>To run the application in the virtual environment:</p> <pre><code>pygpsclient\n</code></pre> </li> </ul> <p>Example</p> <p>To install and run the the Python package inside the <code>env</code> virtual environment:</p> <pre><code>source env/bin/activate\npython3 -m pip install pygpsclient\npygpsclient\n</code></pre>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#deactivate-the-virtual-environment","title":"Deactivate the Virtual Environment","text":"<p>To deactivate the virtual environment:</p> <pre><code>deactivate\n</code></pre> <ul> <li> <p>Once deactivated, the virtual environment can be reactivated with the activation command:</p> <pre><code>source &lt;directory&gt;/bin/activate\n</code></pre> </li> <li> <p>To reactivate and run the Python package in the virtual environment:</p> <pre><code>source &lt;directory&gt;/bin/activate\npygpsclient\n</code></pre> <p>Example</p> <pre><code>source env/bin/activate\npygpsclient\n</code></pre> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#enable-user-port","title":"Enable User Port","text":"<p>In certain circumstances, users may need to manually configure the serial port for the application to function.</p> <ul> <li> <p>Pi 3/4/Zero 2W:</p> <pre><code>sudo pygpsclient ---userport /dev/ttyS0\n</code></pre> </li> <li> <p>Pi 5:</p> <pre><code>sudo pygpsclient ---userport /dev/ttyAMA0\n</code></pre> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#launch-options","title":"Launch Options","text":"<p>While not required to operate the <code>PyGPSClient</code> software, user have additional options for how the Python package is executed.</p> <ul> <li>To operate the software outside of a virtual environment, users can add the directory of the software's binaries to the <code>PATH</code> variable.</li> <li>To utilize the software without an open terminal to be open, users can create a desktop application launcher.</li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#locate-relevant-binaries","title":"Locate Relevant Binaries","text":"<p>The location of the relevant binaries folder can usually be found by executing one of the following commands:</p> <ul> <li> <p>If the package was installed in the virtual environment, activate it:</p> <pre><code>source &lt;directory&gt;/bin/activate\n</code></pre> </li> <li> <p>For a global installation, execute the following command:</p> <pre><code>python3 -c \"import os,sysconfig;print(sysconfig.get_path('scripts'))\"\n</code></pre> <p>The system should return the following directory for the relevant binaries, in a virtual environment:</p> <pre><code>/home/&lt;user&gt;/&lt;directory&gt;/bin\n</code></pre> </li> <li> <p>Deactivate, if inside a virtual environment:</p> <pre><code>deactivate\n</code></pre> </li> </ul> <p>Example</p> <p>For a virtual environment, to find the directory of the relevant binaries execute the following commands:</p> <pre><code>source env/bin/activate\npython3 -c \"import os,sysconfig;print(sysconfig.get_path('scripts'))\"\ndeactivate\n</code></pre>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#add-to-path-variable","title":"Add to <code>PATH</code> Variable","text":"<p>To make the Python package accessible outside of the virtual environment, the directory of the relevant binaries need to be added to the <code>PATH</code> variable:</p> <pre><code>export PATH=\"$PATH:&lt;directory to relevant binaries&gt;\"\nsource ~/.profile\n</code></pre> <p>Example</p> <pre><code>export PATH=\"$PATH:/home/pi/env/bin\"\nsource ~/.profile\n</code></pre> <p>Once added, the application should now be available outside of the virtual environment:</p> <pre><code>pygpsclient\n</code></pre>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#application-launcher","title":"Application Launcher","text":"<p>In addition to the previous sections, users can follow these instructions to create an application launcher.</p> <ol> <li> <p>Create a text file named <code>pygpsclient.desktop</code> with the following content and save it in the <code>/home/&lt;user&gt;/.local/share/applications</code> directory.</p> <pre><code>[Desktop Entry]\nType=Application\nTerminal=false\nName=PyGPSClient\nIcon=/home/&lt;user&gt;/.local/lib/&lt;python version&gt;/site-packages/pygpsclient/resources/pygpsclient.ico\nExec=/home/&lt;user&gt;/.local/bin/pygpsclient\n</code></pre> <p>Example</p> <pre><code>[Desktop Entry]\nType=Application\nTerminal=false\nName=PyGPSClient\nIcon=/home/pi/.local/lib/python3.13/site-packages/pygpsclient/resources/pygpsclient.ico\nExec=/home/pi/.local/bin/pygpsclient\n</code></pre> <p>Tip</p> <p>Users can also validate the file, with the following command:</p> <pre><code>desktop-file-validate &lt;file_name&gt;.desktop\n</code></pre> </li> <li> <p>Logout and back in for the changes to take effect.</p> </li> </ol>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#ntrip-client","title":"NTRIP Client","text":"<p>Configuration settings for connecting to an NTRIP client.</p> <p>To receive and process NTRIP RTK correction data from an NTRIP server in the PyGPSClient software, users can follow these instructions:</p> <ol> <li>Click on the  icon, labeled <code>NTRIP Client</code>.</li> <li>Enter the information for the network and mount point.<ul> <li>For an NTRIP server hosted by the <code>PyGPSClient</code> software:<ul> <li>Server: IP address of Pi</li> <li>Port: <code>2101</code></li> <li>Mountpoint: <code>pygnssutils</code></li> <li>User: <code>anon</code></li> <li>Password: <code>password</code></li> </ul> </li> </ul> </li> <li>Click on the  icon to connect to the server.</li> </ol>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#ntrip-server","title":"NTRIP Server","text":"<p>Configuration settings for an NTRIP caster.</p> <p>If their GNSS receiver is supported by NTRIP sever feature of the PyGPSClient software, users can follow these instructions to setup their Raspberry Pi to operate as an NTRIP sever:</p> <ol> <li>In the settings console, scroll to the bottom and select <code>NTRIP CASTER</code> from the Mode drop-down menu.</li> <li>Select the box for <code>Configure Base Station</code> and select the GNSS receiver from the drop-down menu.</li> <li>Select a mode of operation for the base station and provide the necessary information.</li> <li>Select the box for <code>Socket Server/NTRIP Caster</code>.</li> </ol>"},{"location":"SparkFun_GNSS_Flex_pHAT/software_overview/#mosaic-x5-internet-access","title":"mosaic-X5 - Internet Access","text":"<p>In order to receive or cast RTK corrections to/from a RTK network, such as NTRIP, the mosaic-X5 GNSS receiver will need access to the internet through the USB interface.</p> <ul> <li> <p>Users will need to use the web interface to enable the <code>Outgoing Internet Access Over USB</code> from the Communication &gt; USB drop-down menu of the navigation tabs.</p> <p> </p> </li> <li> <p>This also requires users to configure a network bridge on the Raspberry Pi.      Editing the network connections to create a network bridge. </p> <ol> <li>Open the network connections menu by opening the network manager (i.e. \u2191\u2193 or  icon on taskbar) and selecting Advanced Options &gt; Edit Connections.      Editing the connections through the Raspberry Pi's Network Manager. </li> <li>Check the wired connections under Ethernet to locate the connection that lists Device: <code>usb0 ....</code> in its properties.      Check the connections listed under Ethernet. </li> <li>For that network connection, select the IP v4 Settings tab and select <code>Shared to other computers</code> from the Method drop-down menu.</li> <li>Click Save to apply the changes.</li> <li>Reboot the Raspberry Pi.</li> <li> <p>To determine the new IP address assigned to the mosaic-X5, click on network manager and select Advanced Options &gt; Connection Information. Locate the IP address listed for the same wired connection.</p> <p>New IP Address</p> <p>Once a network bridge is enabled, the receiver will receive its IP address from the computer's DHCP server. Depending on the routing table, the module may no longer be reachable at its default IP address (<code>192.168.3.1</code>).</p> <p>If users need to determine the subnet address of the network connection, they need to install a tool called <code>nmap</code>. <pre><code>sudo apt install nmap -y\n</code></pre> In a terminal enter the following command to determine IP address. <pre><code>nmap &lt;IP Address&gt;/24\n</code></pre></p> <ul> <li>With the <code>*/24</code> option, the program will scan all the Class C subnet addresses (i.e. from <code>A.B.C.x</code> through <code>A.B.C.255</code>)</li> </ul> <p>Tip</p> <p>If the mosaic is still not connecting, try resetting it. The assigned IP should not change after it has booted.</p> </li> </ol> </li> </ul>"},{"location":"SparkFun_GNSS_Flex_pHAT/troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search product forums and ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p> <p>Is PyGPSClient disconnecting?</p> <p>If PyGPSClient disconnects from the serial port after a few seconds, you probably still have the Login Shell enabled. Use 'raspi-config' to ensure: the serial port hardware is enabled; and that the login shell is not accessible.</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/troubleshooting_tips/#pygpsclient-system-wide-access","title":"PyGPSClient (system wide access)","text":"<p>Users could potentially make the pyGPSCLient application globally available on the Raspberry Pi; however, that is outside the scope of this document.</p> <p>Tip</p> <p>For some tips, users can check out these recommendations on stackoverflow</p>"},{"location":"SparkFun_GNSS_Flex_pHAT/troubleshooting_tips/#pygpsclient-dependencies","title":"PyGPSClient Dependencies","text":"<p>For those not interested in the GUI, but would still like to access its functionality, the libraries of the the <code>PyGPSClient</code> Python package are listed below:</p> <ul> <li>pynmeagps - a parser and generator for NMEA 0183 protocol messages.</li> <li>pyubx2 - a parser and generator for u-blox UBX protocol messages.</li> <li>pyrtcm - a parser for RTCM protocol messages.</li> <li>pyspartn - a parser for SPARTN protocol messages.</li> <li>pygnssutils - a series of GNSS utility libraries, including NTRIP and SPARTN clients, an NTRIP caster and a <code>gnssstreamer</code> utility which has broadly comparable functionality to <code>gpsd</code>.</li> <li>pyubxutils - a series of UBX utllities.</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/","title":"Index","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_assembly/#gnss-antenna","title":"GNSS Antenna","text":"<p>In order to receive GNSS signals, users will need to connect a compatible antenna. For the best performance, we recommend users choose an active, L1/L2/L5/L6 GNSS antenna and utilize a low-loss cable.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_assembly/#ufl-connector","title":"U.FL Connector","text":"<p>GNSS antennas are connected to the U.FL connector on the GNSS Flex board. For sturdier connections, users have the option to bridging the connection to the SMA connector on a Flex carrier board.</p> <p></p> <p>Attaching an U.FL cable to the GNSS Flex board.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_assembly/#gnss-flex-headers","title":"GNSS Flex Headers","text":"<p>SparkPNT GNSS Flex modules are plug-in boards featuring different GNSS receivers. They are designed to be easily swapped for repairs and pin-compatible for upgrades. The boards come populated with two 2x10 pin, 2mm pitch female headers for connecting to carrier boards.</p> <p></p> <p>Stacking a GNSS Flex module onto a carrier board.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/","title":"Hardware Overview","text":""},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkPNT GNSS Flex Module - LG290P SKU: GPS-28139 <p> </p> <p> Purchase from SparkFun  </p> <li> <p>This SparkPNT GNSS Flex module features the Quectel LG290P GNSS receiver. The LG290P module is a quad-band, multi-constellation, high-precision, RTK GNSS receiver. The module can simultaneously receive signals from the <code>L1</code>, <code>L2</code>, <code>L5</code>, and <code>L6</code>/<code>E6</code> frequency bands of the GPS, GLONASS, Galileo, BDS, QZSS, and NavIC GNSS constellations. In addition, the module supports SBAS augmentation systems (WASS, EGNOS, BDSBAS, MSAS, GAGAN, and SDCM), PPP services (Feature is still under development) (BDS PPP-B2b, QZSS CLAS, MADOCA-PPP, and Galileo HAS), RTCM, and RTK corrections for precision navigation with a fast convergence time and reliable performance.</p> <p>The built-in NIC anti-jamming unit provides professional-grade interference signal detection and elimination algorithms, effectively mitigating multiple narrow-band interference sources and significantly improving signal reception performance in complex electromagnetic environments. Additionally, the embedded algorithms ensure reliable positioning in complex scenarios such as urban environments and deep tree cover.</p> <p>Features Under Development</p> <ul> <li>I<sup>2</sup>C/SPI - Currently, only the UART interface is supported by the module.</li> <li>PPP Services - Corrections for some of the PPP services have not been implemented.</li> </ul> </li>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#design-files","title":"Design Files","text":"<ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP File</li> <li> Board Dimensions:<ul> <li>1.75\" x 1.25\" (44.45mm x 31.75mm)</li> </ul> </li> </ul> </li> <li> 3D ModelDimensions <p> <p>Download the <code>*.step</code> File</p> Manipulate 3D Model Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p>  Dimensions of the LG290P GNSS Flex module.  </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#board-layout","title":"Board Layout","text":"<p>The GNSS Flex system is designed around two 2x10-pin, 2mm pitch headers used mate the two types of boards. A standardized pin layout, keeps the ecosystem pin-compatible for upgrades and allows board to be easily swapped for repairs. Depending on the capabilities of the GNSS receiver, these pins will breakout the USB, UART (x4), I<sup>2</sup>C, and SD card interfaces along with any PPS or event signals of the GNSS receiver.</p> <p>The LG290P GNSS Flex module has the following features:</p> <p></p> <p>Layout of the major components on the LG290P GNSS Flex module.</p> <ol> <li> LG290P GNSS Receiver The Quectel LG290P GNSS receiver </li> <li> GNSS Flex Headers Two sets of 2x10 pin, 2mm pitch female headers for connecting a GNSS Flex module to carrier boards </li> <li> Ethernet PHY Header A 2x10 pin, 2mm pitch female header that breaks out the Ethernet PHY pins of the LG290P </li> <li> <code>ANT1</code> U.FL Connector An U.FL connector for attaching an external GNSS antenna </li> </ol>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#lg290p-gnss","title":"LG290P GNSS","text":"<p>The centerpiece of the LG290P GNSS Flex module, is the LG290P GNSS module from Quectel. The LG290P is a low-power, multi-band, multi-constellation GNSS receiver capable of delivering centimeter-level precision at high update rates. The built-in NIC anti-jamming unit provides professional-grade interference signal detection and elimination algorithms, which effectively mitigate against multiple narrow-band interference sources and significantly improves the signal reception performance in complex electromagnetic environments. With its performance advantages of high-precision and power consumption, this board is an ideal choice for high-precision navigation applications, such as intelligent robots, UAVs, precision agriculture, mining, surveying, and autonomous navigation.</p> <p></p> <ul> <li> The LG290P module on the LG290P GNSS Flex module. </li> </ul> <p>Features:</p> <ul> <li>Supply Voltage: 3.15\u20133.45V</li> <li>Tracking Channels: 1040</li> <li>Concurrent signal reception: 5 + QZSS<ul> <li><code>L1</code>, <code>L2</code>, <code>L5</code>, <code>E6</code> frequency bands</li> </ul> </li> <li>Sensitivity:<ul> <li>Acquisition: -146dBm</li> <li>Tracking: -160dBm</li> <li>Reacquisition: -155dBm</li> </ul> </li> <li>Antenna Power: External or Internal</li> <li>GNSS Constellations and SBAS Systems:<ul> <li>USA: GPS + WASS</li> <li>Russia: GLONASS + SDCM</li> <li>EU: Galileo + EGNOS</li> <li>China: BDS + BDSDAS</li> <li>Japan: QZSS + MSAS</li> <li>India: NavIC + GAGAN</li> </ul> </li> <li>Accuracy of 1PPS Signal: 5ns (RMS)</li> <li>Update Rate:<ul> <li>Default: 10Hz</li> <li>Max: 20Hz</li> </ul> </li> </ul> <p></p> <ul> <li>Time to First Fix (without AGNSS):<ul> <li>Cold Start: 28s</li> <li>Warm Start: 28s</li> <li>Hot Start: 1.7s</li> </ul> </li> <li>RTK Convergence Time: 5s</li> <li>Dynamic Performance:<ul> <li>Maximum Altitude: 10000m</li> <li>Maximum Velocity: 490m/s</li> <li>Maximum Acceleration: 4g</li> </ul> </li> <li>Built-in NIC anti-jamming unit</li> <li>Interfaces<ul> <li>UART (x3)<ul> <li>Baud Rate: 9600\u20133000000bps<ul> <li>Default: 460800bps</li> </ul> </li> <li>Protocol: <code>NMEA 0183</code>/<code>RTCM 3.x</code></li> </ul> </li> <li>SPI<sup>1</sup> (x1)</li> <li>I<sup>2</sup>C<sup>1</sup> (x1)</li> </ul> </li> <li>Operating temperature: -40\u00b0C to +85\u00b0C</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#power-consumption","title":"Power Consumption","text":"<p>The power consumption of the LG290P GNSS module depends on the GNSS signals enabled and the positioning mode.</p> Mode Power (mW) Current (mA) Acquisition 300.3 91 Tracking 300.3 91 Backup 39.6 0.012"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#frequency-bands","title":"Frequency Bands","text":"<p>The LG290P module is a multi-band, multi-constellation GNSS receiver. Below, is a chart illustrating the frequency bands utilized by all the global navigation satellite systems; along with a list of the frequency bands and GNSS systems supported by the LG290P GNSS module.</p> <p></p> <p>Frequency bands of the global navigation satellite systems. (Source: Tallysman)</p> <p>Supported Frequency Bands:</p> <ul> <li>GPS: <code>L1 C/A</code>, <code>L1C</code><sup>2</sup>, <code>L5</code>, <code>L2C</code></li> <li>GLONASS: <code>L1</code>, <code>L2</code></li> <li>Galileo: <code>E1</code>, <code>E5a</code>, <code>E5b</code>, <code>E6</code></li> <li>BDS: <code>B1I</code>, <code>B1C</code>, <code>B2a</code>, <code>B2b</code>, <code>B2I</code>, <code>B3I</code></li> <li>QZSS: <code>L1 C/A</code>, <code>L1C</code><sup>2</sup>, <code>L5</code>, <code>L2C</code></li> <li>NavIC: <code>L5</code></li> <li>SBAS: <code>L1 C/A</code></li> <li>L-band PPP<sup>3</sup>:<ul> <li>PPP: <code>B2b</code></li> <li>QZSS: <code>L6</code></li> <li>Galileo HAS: <code>E6</code></li> </ul> </li> </ul> <p>Supported GNSS Constellations:</p> <ul> <li>GPS (USA)</li> <li>GLONASS (Russia)</li> <li>Galileo (EU)</li> <li>BDS (China)</li> <li>QZSS (Japan)</li> <li>NavIC (India)</li> </ul> <p>Supported SBAS Systems:</p> <ul> <li>WASS (USA)</li> <li>SDCM (Russia)</li> <li>EGNOS (EU)</li> <li>BDSBAS (China)</li> <li>MSAS (Japan)</li> <li>GAGAN (India)</li> </ul> <p>Info</p> <p>For a comparison of the frequency bands supported by the LG290P GNSS modules, refer to sections 1.2, 1.5, and 1.6 of the hardware design manual.</p> What are Frequency Bands? <p>A frequency band is a section of the electromagnetic spectrum, usually denoted by the range of its upper and lower limits. In the radio spectrum, these frequency bands are usually regulated by region, often through a government entity. This regulation prevents the interference of RF communication; and often includes major penalties for any interference with critical infrastructure systems and emergency services.</p> <p> Frequency bands of the global navigation satellite systems. (Source: ESA) </p> <p>However, if the various GNSS constellations share similar frequency bands, then how do they avoid interfering with one another? Without going too far into detail, the image above helps illustrate some of the characteristics, specific to the frequency bands of each system. With these characteristics in mind, along with other factors, the chart can help users to visualize how multiple GNSS constellations might co-exist with each other.</p> <p>For more information, users may find these articles of interest:</p> <ul> <li>GNSS signal</li> <li>GPS Signal Plan</li> <li>GLONASS Signal Plan</li> <li>GALILEO Signal Plan</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#position-accuracy","title":"Position Accuracy","text":"<p>The accuracy of the position reported from the LG290P GNSS module, can be improved based upon the correction method being employed. Currently, RTK corrections provide the highest level of accuracy; however, users should be aware of certain limitations of the system:</p> <ul> <li>RTK technique requires real-time correction data from a reference station or network of base stations.<ul> <li>RTK corrections usually come from RTCM messages that are signal specific (i.e. an RTK network may only provide corrections for specific signals; only <code>E5b</code> and not <code>E5a</code>).</li> </ul> </li> <li>The range of the base stations will vary based upon the method used to transmit the correction data.</li> <li>The reliability of RTK corrections are inherently reduced in multipath environments.</li> </ul> Correction Method Horizontal Vertical Velocity Standalone 0.7m~2.3' 2.5m~8.2' 3cm/s (0.108kph)~1.2in/s (0.067mph) RTK 0.8cm (+1ppm)~0.3\" 1.5cm (+1ppm)~.6\" RTK Corrections <p>To understand how RTK works, users will need a more fundamental understanding of the signal error sources.</p> <ul> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>GNSS Corrections Demystified</p> <p>Tip</p> <p>For the best performance, we highly recommend that users configure the module to utilize/provide RTK corrections with a compatible L1/L2/L5/L6 GNSS antenna and utilize a low-loss cable.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#gnss-flex-headers","title":"GNSS Flex Headers","text":"<p>The GNSS Flex system is designed around two 2x10-pin, 2mm pitch headers used mate the two types of boards. A standardized pin layout, keeps the ecosystem pin-compatible for upgrades and allows boards to be easily swapped for repairs. For the LG290P GNSS receiver, these pins will breakout the UART (x3) and I<sup>2</sup>C interfaces along with a PPS, event, and LED status indication signal from the GNSS receiver.</p> <p></p> <p>The peripherals and I/O pins on the LG290P GNSS Flex module.</p> <p>Below, are the features that are available from the LG290P GNSS receiver.</p> <p>Supported Interfaces:</p> <ul> <li>UART (x3)</li> <li>SPI<sup>1</sup></li> <li>I<sup>2</sup>C<sup>1</sup></li> <li>Event Trigger</li> <li>Timing Signal</li> <li>RTK Signal</li> </ul> UART PortsPPS OutputLED OutputEvent Trigger <p>The LG290P GNSS has three UART ports, which can be operated and configured separately.</p> <p> The UART ports on the LG290P GNSS Flex module. </p> <p>Default Configuration</p> <p>By default, the UART ports are configured with the following settings: </p> <ul> <li>Logic Level: 3.3V</li> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> <li>Protocols:<ul> <li><code>NMEA 0183</code></li> <li><code>RTCM 3.x</code></li> </ul> </li> </ul> UART Protocols <p>By default, these UART ports are configured to transmit and receive <code>NMEA 0183</code> and/or <code>RTCM 3.x</code> messages. These messages are generally used for transmitting PNT data; and providing or receiving RTK corrections, respectively. Quectel also implements a system of proprietary messages (<code>PQTM</code>) for users to configure the LG290P that follows a data format similar to the <code>NMEA</code> protocol. The expected structure of these proprietary messages is shown below:</p> <p>  The data structure of Quectel messages for the <code>NMEA</code> protocol.  </p> NMEAPQTMRTCM <p>A full list of compatible <code>NMEA 0183</code> v4.11 messages, is provided in section 2.2. Standard Messages of the GNSS Protocol Specification manual. This protocol is used for outputting GNSS data, as detailed by the National Marine Electronics Association organization.</p> List of Standard NMEA Messages Message Type Mode Message Description RMC Output Recommended Minimum Specific GNSS Data GGA Output Global Positioning System Fix Data GSV Output GNSS Satellites in View GSA Output GNSS DOP and Active Satellites VTG Output Course Over Ground &amp; Ground Speed GLL Output Geographic Position \u2013 Latitude/Longitude <p>A full list of PQTM messages (proprietary NMEA messages defined by Quectel) supported by LG290P, is provided in section 2.3. PQTM Messages of the GNSS Protocol Specification manual. This protocol is used to configure or read the settings for the LG290P GNSS module.</p> List of Proprietary Quectel Messages Message Type Mode Message Description PQTMVER Output Outputs the firmware version PQTMCOLD Input Performs a cold start PQTMWARM Input Performs a warm start PQTMHOT Input Performs a hot start PQTMSRR Input Performs a system reset and reboots the receiver PQTMUNIQID Output Queries the module unique ID PQTMSAVEPAR Input Saves the configurations into NVM PQTMRESTOREPAR Input Restores the parameters configured by all commands to their default values PQTMVERNO Output Queries the firmware version PQTMCFGUART Input/Output Sets/gets the UART interface PQTMCFGPPS Input/Output Sets/gets the PPS feature PQTMCFGPROT Input/Output Sets/gets the input and output protocol for a specified port PQTMCFGNMEADP Input/Output Sets/gets the decimal places of standard NMEA messages PQTMEPE Output Outputs the estimated position error PQTMCFGMSGRATE Input/Output Sets/gets the message output rate on the current interface PQTMVEL Output Outputs the velocity information PQTMCFGGEOFENCE Input/Output Sets/gets geofence feature PQTMGEOFENCESTATUS Output Outputs the geofence status PQTMGNSSSTART Input Starts GNSS engine PQTMGNSSSTOP Input Stops GNSS engine PQTMTXT Output Outputs short text messages PQTMCFGSVIN Input/Output Sets/gets the Survey-in feature PQTMSVINSTATUS Output Outputs the Survey-in status PQTMPVT Output Outputs the PVT (GNSS only) result PQTMCFGRCVRMODE Input/Output Sets/gets the receiver working mode PQTMDEBUGON Input Enables debug log output PQTMDEBUGOFF Input Disables debug log output PQTMCFGFIXRATE Input/Output Sets/gets the fix interval PQTMCFGRTK Input/Output Sets/gets the RTK mode PQTMCFGCNST Input/Output Sets/gets the constellation configuration PQTMDOP Output Outputs dilution of precision PQTMPL Output Outputs protection level information PQTMCFGODO Input/Output Sets/gets the odometer feature PQTMRESETODO Input Resets the accumulated distance recorded by the odometer PQTMODO Output Outputs the odometer information PQTMCFGSIGNAL Input/Output Sets/gets GNSS signal mask PQTMCFGSAT Input/Output Sets/gets GNSS satellite mask PQTMCFGRSID Input/Output Sets/gets the reference station ID PQTMCFGRTCM Input/Output Sets/gets RTCM <p>A full list of compatible <code>RTCM v3</code> messages, is provided in section 3. RTCM Protocol of the GNSS Protocol Specification manual. This protocol is used for transferring GNSS raw measurement data, as detailed by the Radio Technical Commission for Maritime Services organization.</p> List of Supported RTCMv3 (MSM) Messages Message Type Mode Message Description 1005 Input/Output Stationary RTK Reference Station ARP 1006 Input/Output Stationary RTK Reference Station ARP with height 1019 Input/Output GPS Ephemerides 1020 Input/Output GLONASS Ephemerides 1041 Input/Output NavIC/IRNSS Ephemerides 1042 Input/Output BDS Satellite Ephemeris Data 1044 Input/Output QZSS Ephemerides 1046 Input/Output Galileo I/NAV Satellite Ephemeris Data 1073 Input/Output GPS MSM3 1074 Input/Output GPS MSM4 1075 Input/Output GPS MSM5 1076 Input/Output GPS MSM6 1077 Input/Output GPS MSM7 1083 Input/Output GLONASS MSM3 1084 Input/Output GLONASS MSM4 1085 Input/Output GLONASS MSM5 1086 Input/Output GLONASS MSM6 1087 Input/Output GLONASS MSM7 1093 Input/Output Galileo MSM3 1094 Input/Output Galileo MSM4 1095 Input/Output Galileo MSM5 1096 Input/Output Galileo MSM6 1097 Input/Output Galileo MSM7 1113 Input/Output QZSS MSM3 1114 Input/Output QZSS MSM4 1115 Input/Output QZSS MSM5 1116 Input/Output QZSS MSM6 1117 Input/Output QZSS MSM7 1123 Input/Output BDS MSM3 1124 Input/Output BDS MSM4 1125 Input/Output BDS MSM5 1126 Input/Output BDS MSM6 1127 Input/Output BDS MSM7 1133 Input/Output NavIC/IRNSS MSM3 1134 Input/Output NavIC/IRNSS MSM4 1135 Input/Output NavIC/IRNSS MSM5 1136 Input/Output NavIC/IRNSS MSM6 1137 Input/Output NavIC/IRNSS MSM7 <p>From the module, the PPS output signal is a 3.3V signal output.</p> <p> The <code>PPS</code> signal's output on the LG290P GNSS Flex module. </p> Use Case <ul> <li>Users could use this signal in conjunction with the event pins to synchronize two modules with each other.</li> <li>Users could use this signal to create their own Stratum 0 source for the NTP on a primary time server.</li> </ul> <p>The <code>RTK</code> PTH pin operates as both the <code>RTK_LED</code> status indicator for the RTK positioning and <code>ANT_ON</code> power control for the external LNA or active antenna power.</p> <p> The <code>RTK_LED</code> pin on the LG290P GNSS Flex module. </p> <code>RTK_LED</code><code>ANT_ON</code> <p>In this configuration, the pin is set to a high level at startup.</p> <ol> <li>If the pin output is high, it indicates the module has entered the RTK fixed mode.</li> <li>If the pin output is low, it indicates that the module exited the RTK fixed mode.</li> <li>If the pin outputs an alternating pin level, it indicates that the module received the correct RTCM data and did not enter the RTK fixed mode.</li> </ol> <p>In this configuration, the pin is used to control the external LNA or active antenna power supply.</p> <ul> <li>When the pin is high, the antenna is powered.</li> <li>When the pin is low, the antenna is not powered.</li> </ul> <p>This pin can be triggered by inputs with an adjustable frequency and polarity.</p> <p> The event pin on the LG290P GNSS Flex module. </p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/hardware_overview/#ufl-connector","title":"U.FL Connector","text":"<p>Users will need to connect a compatible GPS antenna to the <code>L1/L2/L5/E6 Antenna</code> U.FL connector. The type of antenna used with the LG290P module affects the overall accuracy of the positions calculated by the GNSS receiver.</p> <ul> <li>Passive antennas are not recommended for the LG290P GNSS module.</li> <li>To mitigate the impact of out-of-band signals, utilize an active antenna whose SAW filter is placed in front of the LNA in the internal framework.<ul> <li>DO NOT select and antenna with the LNA placed in the front.</li> </ul> </li> <li>There is no need to inject an external DC voltage into the SMA connector for the GNSS antenna. Power is already provided from the LG290P module for the LNA of an active antenna.</li> </ul> <p></p> <p>The U.FL connector to attach an external GNSS antenna to the LG290P GNSS Flex module.</p> <p>Tip</p> <p>For the best performance, we recommend users choose a compatible L1/L2/L5/L6 GNSS antenna and utilize a low-loss cable.</p> <ol> <li> <p>Feature Under Development</p> <p>Currently, only the UART interface is supported by the module. Support for the I<sup>2</sup>C and SPI interfaces are still under development.</p> <p>\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>Support for the <code>L1C</code> frequency band has not been implemented.</p> <p>\u21a9\u21a9</p> </li> <li> <p>Feature Under Development</p> <p>Corrections for some of the PPP services have not been implemented.</p> <p>\u21a9</p> </li> </ol>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/resources/","title":"Resources","text":""},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/resources/#product-resources","title":"Product Resources","text":"<ul> <li>Product Pages<ul> <li>SparkFun logo SparkPNT GNSS Flex Module - LG290P</li> <li>SparkFun logo SparkFun GNSS Flex pHAT - LG290P</li> </ul> </li> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li> QGNSS Software (v2.0)</li> <li>Component Documentation<ul> <li> Product Specifications</li> <li> Protocol Specification</li> <li> RTK Application Note</li> <li> Base Station Mode Application Note</li> <li> Hardware Design</li> <li> Firmware Upgrade Guide</li> </ul> </li> <li> Product Showcase</li> <li> GitHub Repository</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/resources/#additional-resources","title":"Additional Resources","text":"<ul> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/resources/#manufacturers-resources","title":"\ud83c\udfed\u00a0Manufacturer's Resources","text":"<p>Quectel also provides great resources for the LG290P GNSS module:</p> <ul> <li> Product Webpage</li> <li> Quectel Forum</li> <li> Technical Support</li> <li> Download Zone</li> <li> Resource Library</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/","title":"Software Overview","text":""},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#gnss-software","title":"GNSS Software","text":"<p>Tip</p> <p>While it is not required, we highly recommend that users configure their LG290P GNSS module with the QGNSS software provided by Quectel. This is due to the unique data structure of the UART command messages, utilized to configure the LG290P module.</p> Windows Only <p>Currently, the QGNSS software is only available for Windows operating systems.</p> Windows, MacOS, or Linux <p>For users with computers that run on MacOS or Linux, we have found alternative software option for viewing the data from the NMEA messages. However, this GUI interface is currently limited to only receiving UART messages and cannot send messages to configure the LG290P module.</p> <ul> <li> GitHub Repository</li> <li>Installation Instructions</li> <li>PyPI Project</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#qgnss-software","title":"QGNSS Software","text":"<p>Windows Only</p> <p>Currently, the QGNSS software is only available for Windows operating systems.</p> <p>QGNSS is highly intuitive GNSS evaluation software that is easy to use, personalized, and compatible with leading Quectel technologies. The software allows users to define or apply GNSS product configurations for specific use cases. Saving, restoring, or sharing configurations between different products and users is easy. The software supports product evaluation with a choice of views to observe static and dynamic behavior of the connected a Quectel GNSS receiver.</p> <p> Download the QGNSS Software (v2.0) from Quectel</p> <p>System Requirements</p> <p>Operating System: Windows</p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#connecting-to-the-lg290p","title":"Connecting to the LG290P","text":"<p>In order to connect to the LG290P properly, users will need USB-to-Serial converter to connect to one of the LG290P's UART ports.</p> <p></p> <p>Click the  button to configure the UART settings.</p> <p>Before users can connect to the LG290P GNSS Flex module, they will need to specify the connection settings in QGNSS. Once configured, users can select the OK button and QGNSS will automatically attempt to connect to the GNSS module.</p> <ul> <li>Select the <code>LG290P(03)</code> from the drop-down menu to configure the <code>Model</code> of the GNSS module being connected.</li> <li>Below, is a list of the default settings for <code>UART</code> ports of the LG290P. These settings should be selected in the <code>Device Information</code> menu, unless configured differently.</li> <li>For the <code>Port</code>, select the port associated with the attached USB-to-Serial converter.</li> </ul> <p></p> <p>Specify the settings for the UART port in QGNSS.</p> <p>LG290P - Default Settings</p> <p>The UART ports of the LG290P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#configure-the-lg290p","title":"Configure the LG290P","text":"<p>By default, the UART ports are configured to transmit and receive <code>NMEA 0183</code> and/or <code>RTCM 3.x</code> messages. These messages are generally used for transmitting PNT data; and providing or receiving RTK corrections, respectively. Quectel also implements a system of proprietary messages (<code>PQTM</code>) for users to configure the LG290P, following the data format of the <code>NMEA</code> protocol.</p> Data Format - PQTM Messages <p>The expected structure of the data in the proprietary PQTM messages is shown below:</p> <p>  The data structure of Quectel messages for the <code>NMEA</code> protocol.  </p> <p><code>&lt;Checksum&gt;</code>:</p> <ul> <li>Checksum field follows the checksum delimiter character <code>*</code>.</li> <li>Checksum is the 8-bit exclusive OR of all characters in the sentence, including <code>,</code> the field delimiter, between but not including the <code>$</code> and the <code>*</code> delimiters.</li> </ul> <p><code>&lt;CR&gt;</code> &amp; <code>&lt;LF&gt;</code>: Carriage return; followed by a new line</p> <ul> <li>Depending on the terminal emulator, these may be options configured in the program settings.</li> <li>Otherwise, users may need to add the <code>\\r</code> and <code>\\n</code> characters at the end of the message.</li> </ul> <p>In the QGNSS software, users can click on the Advance button, at the bottom of the <code>QConsole</code> window, to configure the settings for the messages sent to the LG290P. Selecting <code>NMEA</code> and <code>CRLF</code> from the drop-down menu of the Checksum Type and Suffix options, will automatically calculate and append the <code>&lt;checksum&gt;</code> value, carriage return, and line follow to the end of the message entered in the Data Input field.</p> <p></p> <p>The settings for the messages transmitted from the QConsole.</p> Display the QConsole Toolbar <p>There is a toolbar for the QConsole, which has a bunch of tools that users may find useful. This includes, a search function, scroll-lock button, pause/clear the message feed, etc. To open/close the toolbar inside the QConsole, right-click on the mouse and select the <code>Show Tool</code> option from the drop-down menu or utilize the keyboard shortcut: Ctrl + Q.</p> <p> Right-click on the mouse and select the <code>Show Tool</code> option, inside the QConsole.  </p> Example - <code>PQTMCFGUART</code> Message <p>As an example, try utilizing the <code>PQTMCFGUART</code> PQTM message. Enter <code>$PQTMCFGUART,R*</code> into the Data Input* field of the QConsole. DOn't forget to select the <code>NMEA</code> and <code>CRLF</code> options from Advance settings menu. If entered and configured properly, the value <code>36</code> should pop up in the Checksum field of the QConsole; then, click on the  button to send the message.</p> <pre><code>$PQTMCFGUART,R*\n</code></pre> <p>Once the message has been sent, keep a close watch of the messages in the console. It may help to click on the  button to disable auto-scrolling, when trying to locate the message response. Additionally, the response may not appear right away, it could be appended to the end of the next data packet, as shown in the image below.</p> <p>  Example of utilizing the Quectel PQTM messages in the QConsole.  </p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#pygpsclient","title":"PyGPSClient","text":"<p>As an alternative to QGNSS, we recommend PyGPSClient for users with computers that run on MacOS or Linux.</p> Resources <p>For additional information, users can refer to the following resources for the PyGPSClient software:</p> <ul> <li> GitHub Repository</li> <li>Installation Instructions</li> <li>PyPI Project</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#installation","title":"Installation","text":"<p>There are a variety of installation methods detailed in the GitHub repository's <code>README.md</code> file. However, we recommend utilizing the <code>pip</code> installation method.</p> <p>Installation Commands</p> <p>Depending on how Python is installed on the computer, one of the following commands should allow users to install the software.</p> <ul> <li> <pre><code>python3 -m pip install pygpsclient\n</code></pre> </li> <li> <pre><code>pip install pygpsclient\n</code></pre> </li> </ul> System Requirements <p>This installation method requires an internet connection. Additionally, users will also need administrative privileges (or root access <code>sudo</code>) for the installation.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#connecting-to-the-lg290p_1","title":"Connecting to the LG290P","text":"<p>Before users can connect to the LG290P GNSS Flex module, they will need to specify the settings of the UART port in PyGPSClient. Once configured, users can select the  button and PyGPSClient will automatically attempt to connect to the GNSS module.</p> <ul> <li>Below, is a list of the default settings for <code>UART</code> ports of the LG290P. These settings should be selected in the configuration menu.</li> <li>For the <code>Serial Port</code>, select the port associated with the attached USB-to-Serial converter.</li> </ul> <p></p> <p>Specify the settings for the UART port in QGNSS.</p> <p>LG290P - Default Settings</p> <p>The UART ports of the LG290P GNSS module will have the following default configuration:</p> <ul> <li>Baudrate: 460800bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/software_overview/#arduino-library","title":"Arduino Library","text":"<p>The SparkFun LG290P Quadband RTK GNSS Arduino Library can be installed from the library manager in the Arduino IDE by searching for:</p> <pre><code>SparkFun LG290P Quadband RTK GNSS Arduino Library\n</code></pre> <p></p> <p>SparkFun LG290P Quadband RTK GNSS Arduino Library in the library manager of the Arduino IDE.</p> <p>Manually Download the Arduino Library</p> <p>For users who would like to manually download and install the library, the <code>*.zip</code> file can be accessed from the GitHub repository or downloaded by clicking the button below.</p> <p>  Download the Arduino Library </p>"},{"location":"SparkPNT_GNSS_Flex_Module_LG290P/troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun GNSS Forum is a great place to ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/","title":"Index","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>getting_started.md</code> file.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_assembly/","title":"Hardware Assembly","text":"<p>Important: Read Before Use!</p> <p>ESD Sensitivity</p> <p>The mosaic-X5 module is sensitive to ESD. Use a proper grounding system to make sure that the working surface and the components are at the same electric potential.</p> ESD Precaution <p>As recommended by the manufacturer, we highly recommend that users take the necessary precautions to avoid damaging their module.</p> <ul> <li>The mosaic-X5 GNSS Flex module features ESD protection on the USB-C connector and breakout's I/O:<ul> <li>USB data lines</li> <li>I/O PTH pads</li> <li>JST connector's pins</li> </ul> </li> <li>The mosaic-X5 module features internal ESD protection to the <code>ANT_1</code> antenna input.</li> </ul> <p> </p> <ul> <li> <p> <p>iFixit Anti-Static Wrist Strap TOL-25572</p> <p>Active Antenna</p> <p>Never inject an external DC voltage into the SMA connector for the GPS antenna, as it may damage the mosaic-X5 module. For instance, when using a splitter to distribute the antenna signal to several GNSS receivers, make sure that no more than one output of the splitter passes DC. Use DC-blocks otherwise.</p> Info <p>A 3 - 5.5V DC voltage can be applied to the main antenna from the <code>VANT</code> pin, obviating the need for an external antenna supply or bias-tee.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_assembly/#gnss-antenna","title":"GNSS Antenna","text":"<p>In order to receive GNSS signals, users will need to connect a compatible antenna. For the best performance, we recommend users choose an active, L1/L2/L5/L6 GNSS antenna and utilize a low-loss cable.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_assembly/#ufl-connector","title":"U.FL Connector","text":"<p>GNSS antennas are connected to the U.FL connector on the GNSS Flex board. For sturdier connections, users have the option to bridging the connection to the SMA connector on a Flex carrier board.</p> <p></p> <p>Attaching an U.FL cable to the GNSS Flex board.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_assembly/#gnss-flex-headers","title":"GNSS Flex Headers","text":"<p>SparkPNT GNSS Flex modules are plug-in boards featuring different GNSS receivers. They are designed to be easily swapped for repairs and pin-compatible for upgrades. The boards come populated with two 2x10 pin, 2mm pitch female headers for connecting to carrier boards.</p> <p></p> <p>Stacking a GNSS Flex module onto a carrier board.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/","title":"Hardware Overview","text":"<p>Danger</p> <p>ESD Sensitivity</p> <p>The mosaic-X5 module is sensitive to ESD. Use a proper grounding system to make sure that the working surface and the components are at the same electric potential.</p> ESD Precaution <p>As recommended by the manufacturer, we highly recommend that users take the necessary precautions to avoid damaging their module. For example, users can utilize the iFixit Anti-Static Wrist Strap.</p> <p> </p> <p>Active Antenna</p> <p>Never inject an external DC voltage with the GNSS antenna, as it may damage the mosaic-X5 module. For instance, when using a splitter to distribute the antenna signal to several GNSS receivers, make sure that no more than one output of the splitter passes DC. Use DC-blocks otherwise.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkPNT GNSS Flex Module - LG290P SKU: GPS-28138 <p> </p> <p> Purchase from SparkFun  </p> <li> <p>This SparkPNT GNSS Flex module features the Septentrio mosaic-X5, a compact, ultra-low power, multi-band, multi-constellation, high-precision GNSS receiver. The receiver supports the GPS (USA), GLONASS (Russia), Beidou (China), Galileo (Europe), and NavIC (India) constellations, including regional systems (i.e. SBAS and QZSS). With its Real Time Kinematics (RTK) capabilities, the module can achieve a horizontal accuracy of 6mm (~0.25in), vertical accuracy of 1cm (~0.4in) using RTK, and timing precision of 5ns (5 billionths of a second). It also features Septentrio's unique AIM+ technology for interference mitigation and anti-spoofing, ensuring best-in-class reliability and scalable position accuracy.</p> <p>The mosaic-X5 is a sophisticated module with an internal web server that can be utilized with any web browser. On the GNSS Flex module, the web server is accessed through either the USB data pins from the standard GNSS Flex headers; or the Ethernet PHY of the mosaic-X5, which is broken out on an third 2x10 pin, 2mm pitch female header. To guide users through the configuration options, Septentrio provides dozens of video tutorials about the web interface.</p> <p>For the users who prefer a command-line interface, Septentrio has you covered. Users can still control and configure the mosaic-X5 module through a CLI, which is useful for scenarios such as production line testing (in fact, that is how we test this board) or remote access.</p> </li> mosaic-X5 Product Comparison <p>Below is a simple comparison table between our mosaic-X5 GNSS products and Septentrio's development and evaluation kits:</p> <p>      mosaic-X5 Development Kit      mosaic-go Evaluation Kit      mosaic-X5 GNSS Breakout      RTK mosaic-X5      mosaic-X5 Flex Module GNSS Antenna Dual          Single (mosaic-X5)         Dual (mosaic-H)      Single Single Single USB Connector micro-B micro-B Type-C Type-C N/A* Ethernet          Yes 10/100 Base-T No No          Yes 10/100 Base-T 2x10 Header* WiFi No No No          Yes - Network Bridge 10 Base-T No COM Ports 4 2 4          1 - mosaic-X5         1 - ESP32      4 \u00b5SD Card Slot Yes Yes Yes Yes 2x10 Header* Reset/Log Buttons Yes No* Yes Yes No Logic-Level          1.8V         3.3V      3.3V 3.3V          3.3V         5V      3.3V PPS Signal Header Pin 6-Pin JST Connector SMA Connector Screw Terminal 2x10 Header* Enclosure Material N/A Metal N/A Aluminum N/A Dimensions N/A 71 x 59 x 12mm \u00b1 1mm 70.9 x 50.8 x 8mm          180.6 x 101.8 x 41mm Enclosure Only Weight N/A 58g  \u00b1 1g 22.6g          415.15g Enclosure Only <p>mosaic-go Evaluation Kit</p> <p>The reset pin is exposed on 4-pin JST connector and the log pin is connected to the latch pin of the SD card slot.</p> <p>mosaic-5 Flex Module</p> <p>SparkPNT GNSS Flex modules are modular, plug-in boards that utilize a carrier board to access the pins of the GNSS Flex headers.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#design-files","title":"Design Files","text":"<ul> <li> <p>KiCad primary logo Design Files</p> <ul> <li> Schematic</li> <li> KiCad Files</li> <li> STEP File</li> <li> Board Dimensions:</li> </ul> </li> <li> 3D ModelDimensions <p> <p>Download the <code>*.step</code> File</p> Manipulate 3D Model Controls Mouse Touchscreen Zoom Scroll Wheel 2-Finger Pinch Rotate Left-Click &amp; Drag 1-Finger Drag Move/Translate Right-Click &amp; Drag 2-Finger Drag <p>  Dimensions of the mosaic-X5 GNSS Flex module.  </p> Need more measurements? <p>For more information about the board's dimensions, users can download the KiCad files for this board. These files can be opened in KiCad and additional measurements can be made with the measuring tool.</p> <p> KiCad - Free Download!</p> <p>KiCad is free, open-source CAD program for electronics. Click on the button below to download their software. (*Users can find out more information about KiCad from their website.)</p> <p> Download KiCad primary logo </p>  Measuring Tool <p>This video demonstrates how to utilize the dimensions tool in KiCad, to include additional measurements:</p> <p> </p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#board-layout","title":"Board Layout","text":"<p>The GNSS Flex system is designed around two 2x10-pin, 2mm pitch headers used to mate the two types of boards. A standardized pin layout, keeps the ecosystem pin-compatible for upgrades and allows boards to be easily swapped for repairs. Depending on the capabilities of the GNSS receiver, these pins will breakout the USB, UART (x4), I<sup>2</sup>C, and SD card interfaces along with any PPS or event signals of the GNSS receiver.</p> <p>The mosaic-X5 GNSS Flex module has the following features:</p> <p></p> <p>Layout of the major components on the mosaic-X5 GNSS Flex module.</p> <ol> <li> mosaic-X5 GNSS Receiver The Septentrio mosaic-X5 GNSS receiver </li> <li> GNSS Flex Headers Two sets of 2x10 pin, 2mm pitch female headers for connecting a GNSS Flex module to carrier boards </li> <li> Ethernet PHY Header A 2x10 pin, 2mm pitch female header that breaks out the Ethernet PHY pins of the mosaic-X5 </li> <li> <code>ANT1</code> U.FL Connector An U.FL connector for attaching an external GNSS antenna </li> </ol>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#mosaic-x5-module","title":"mosaic-X5 Module","text":"<p>The centerpiece of the mosaic-X5 GNSS Flex module, is the mosaic-X5 module from Septentrio. Their mosaic modules are low-power, multi-band, multi-constellation GNSS receivers capable of delivering centimeter-level precision at high update rates. The modules also feature Septentrio's unique AIM+ technology for interference mitigation and anti-spoofing, which ensures their best-in-class reliability and scalable position accuracy.</p> <p></p> <ul> <li> The mosaic-X5 module on the mosaic-X5 GNSS Flex module. </li> </ul> <p>Features:</p> <ul> <li>Operating Voltage: 3.135 - 3.465V</li> <li>Operating Temperature: -40 - 85\u00b0C</li> <li>GNSS Support<ul> <li>GPS: L1C/A, L1PY, L2C, L2P, L5</li> <li>GLONASS: L1CA, L2CA, L2P, L3 CDMA</li> <li>Beidou: B1I, B1C, B2a, B2b, B2I, B3</li> <li>Galileo: E1, E5a, E5b, E5 AltBoc, E6</li> <li>QZSS: L1C/A, L1 C/B, L2C, L5</li> <li>Navic: L5</li> <li>SBAS: Egnos, WA</li> </ul> </li> <li>Antenna Specifications<ul> <li>Preamplification Range: 15-50dB</li> <li>Bias Voltage: 3.0 - 5.5V</li> <li>448 Hardware Channels</li> </ul> </li> <li>Update Rate: 100Hz</li> <li>Latency: &lt; 10ms</li> </ul> <p></p> <ul> <li>Time to Fix<ul> <li>Cold Start: &lt; 45s</li> <li>Warm: &lt; 20s</li> <li>Reacquisition: 1s</li> </ul> </li> <li>Timing Precision: 5ns</li> <li> <p>Position Accuracy</p> Correction Horizontal Vertical RTK 0.6cm (\u00b10.5ppm)~0.25\" 1cm (\u00b11ppm)~.4\" DGNSS 40cm~1.3' 70cm~2.3' SBAS 60cm~2' 80cm~2.6' Standalone 1.2m~4' 1.9m~6.2' </li> </ul> <p>Info</p> <p>The mosaic-X5 has three power modes: Active, Standby, and Off (see the Power Modes section).</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#power-modes","title":"Power Modes","text":"<p>The mosaic-X5 module operates in three different power states.</p> <ul> <li>Off - The module is completely turned off<ul> <li>When transitioning to the Off state from Active, recent data may not be lost and not logged to the external SD card</li> </ul> </li> <li>Standby - The module is in a low-power consumption mode (1)<ul> <li>The module power consumption in standby is &lt;5mW</li> <li>The <code>PMIC_ON_REQ</code> pin is driven <code>LOW</code></li> <li>The <code>MODULE_RDY</code> pin is in a <code>LOW</code></li> <li>Monitors the state of the <code>ONOFF</code> pin (Not available)</li> </ul> </li> <li>Active - The module is operating with all functions active<ul> <li>On power up, the module restarts in the configuration stored in the boot configuration file</li> <li>The <code>PMIC_ON_REQ</code> pin is driven <code>HIGH</code></li> <li>The <code>MODULE_RDY</code> pin is in a <code>HIGH</code> (2)</li> </ul> </li> </ul> <ol> <li>Essentially, the same state as Off; except in the transition to the Standby mode, before the module shuts down:<ul> <li>All logging tasks are terminated</li> <li>The SD card is unmounted</li> <li>The <code>PMIC_ON_REQ</code> pin is driven <code>LOW</code></li> </ul> </li> <li>Level becomes <code>HIGH</code> about 300ms after powering up, reset, or waking up from standby</li> </ol> <p>Info</p> <p>By default, the board is hardwired to operate only in the Active and Off modes.</p> <p>For more information on the power management of the mosaic-X5 module, please refer to sections 3.4, 3.5, 4.1, and 4.13 of the hardware manual.</p> Enabling Standby Mode <p>Users can enable Standby mode on the mosaic-X5, by modifying the <code>V_BATT</code> jumper (see the Jumpers section) and providing an external power source for the <code>V_BATT</code> pin (3.3V). However, because the <code>ONOFF</code> pin isn't exposed users will need to power cycle the board to return to the Active state.</p> Drive Current - <code>PMIC_ON_REQ</code>/<code>MODULE_RDY</code> <p>The drive current on the <code>PMIC_ON_REQ</code> and <code>MODULE_RDY</code> pins is low. Enough to be read by a digital pin on a microcontroller, but not high enough to drive an LED.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#power-consumption","title":"Power Consumption","text":"<p>The power consumption of the mosaic-X5 module depends on the GNSS signals enabled and the positioning mode. The table below, lists the average power consumption for common configurations. The current listed, is based on a supply voltage of 3.3V.</p> GNSS Signals Positioning Mode Power (mW) Current (mA) GPS L1 C/A Stand-Alone (1Hz) 550 167 GPS L1/L2 RTK (1Hz) 670 203 GPS/GLONASS L1/L2 RTK (1Hz) 695 211 GPS/GLONASS L1/L2+GALILEO L1/E5a +BeiDou B1C/B2a RTK (1Hz) 850 258 GPS/GLONASS L1/L2+GALILEO L1/E5a +BeiDou B1C/B2a RTK (100 Hz) 930 282 GPS/GLONASS L1/L2 + L-band PPP (1Hz) 760 230 All signals from all GNSS constellations Static (1Hz) 910 276 All signals from all GNSS constellations +L-band Static(1Hz) 980 297 All signals from all GNSS constellations +L-band Static (100Hz) 1080 327 <p>Source: mosaic-X5 Hardware Manual</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#frequency-bands","title":"Frequency Bands","text":"<p>The mosaic modules are multi-band, multi-constellation GNSS receivers. Below, are charts illustrating the frequency bands utilized by all the global navigation satellite systems and the ones supported by the mosaic-X5 module.</p> <p></p> <p>The frequency bands supported by the mosaic-X5 GNSS receiver.</p> <p></p> <p>Frequency bands of the global navigation satellite systems. (Source: Tallysman)</p> <p>Info</p> <p>For a comparison of the frequency bands supported by the mosaic modules, refer to section 3.1 of the hardware manual.</p> What are Frequency Bands? <p>A frequency band is a section of the electromagnetic spectrum, usually denoted by the range of its upper and lower limits. In the radio spectrum, these frequency bands are usually regulated by region, often through a government entity. This regulation prevents the interference of RF communication; and often includes major penalties for any interference with critical infrastructure systems and emergency services.</p> <p> Frequency bands of the global navigation satellite systems. (Source: ESA) </p> <p>However, if the various GNSS constellations share similar frequency bands, then how do they avoid interfering with one another? Without going too far into detail, the image above illustrates the frequency bands of each system with a few characteristics specific to their signals. Wit these characteristics in mind, along with other factors, the chart can help users to visualize how multiple GNSS constellations might co-exist with each other.</p> <p>For more information, users may find these articles of interest:</p> <ul> <li>GNSS signal</li> <li>GPS Signal Plan</li> <li>GLONASS Signal Plan</li> <li>GALILEO Signal Plan</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#position-accuracy","title":"Position Accuracy","text":"<p>The accuracy of the position reported from the mosaic-X5 module, can be improved based upon the correction method being employed. Currently, RTK corrections provide the highest level of accuracy; however, users should be aware of certain limitations of the system:</p> <ul> <li>RTK technique requires real-time correction data from a reference station or network of base stations.<ul> <li>RTK corrections are signal specific (i.e. an RTK network might provide corrections on only <code>E5b</code> and not <code>E5a</code>).</li> </ul> </li> <li>The range of the base stations will vary based upon the RTK method being employed.</li> <li>The reliability of RTK corrections are inherently reduced in multipath environments. However, with Septentrio's multipath mitigation technology (APME+) on the mosaic-X5, these errors are significantly reduced when compared to multipath mitigation techniques that modify the correlators in the tracking channels.</li> </ul> Correction Horizontal Vertical RTK 0.6cm (\u00b10.5ppm)~0.25\" 1cm (\u00b11ppm)~.4\" DGNSS 40cm~1.3' 70cm~2.3' SBAS 60cm~2' 80cm~2.6' Standalone 1.2m~4' 1.9m~6.2' RTK Corrections <p>To understand how RTK works, users will need a more fundamental understanding of the signal error sources.</p> <ul> <li> <p> <p>Real-Time Kinematics Explained</p> <li> <p> <p>What is Correction Data?</p> <li> <p> <p>GNSS Corrections Demystified</p> <p>Tip</p> <p>For the best performance, we highly recommend that users configure the module to utilize/provide RTK corrections with a compatible L1/L2/L5/L6 GNSS antenna and utilize a low-loss cable.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#gnss-flex-headers","title":"GNSS Flex Headers","text":"<p>The GNSS Flex system is designed around two 2x10-pin, 2mm pitch headers used mate the two types of boards. A standardized pin layout, keeps the ecosystem pin-compatible for upgrades and allows boards to be easily swapped for repairs. For the mosaic-X5 GNSS receiver, these pins will breakout the USB, UART (x4), and SD card interfaces along with a configurable PPS signal, two event signals, and two LED status indication signals from the GNSS receiver.</p> <p></p> <p>The peripherals and I/O pins on the mosaic-X5 GNSS Flex module.</p> <p>Below, are the features that are available from the mosaic-X5 GNSS receiver.</p> <p>Supported Interfaces:</p> <ul> <li>4x UART (LVTTL, up to 4 Mbps)</li> <li>Ethernet (RMII/MDIO), 10/100 Mbps (1)</li> <li>USB device (2.0, HS)</li> <li>SDIO (mass storage)</li> <li>2x GPIO user programmable (2)</li> <li>2x LED outputs</li> <li>2x Event markers</li> <li>1x Configurable PPS out</li> </ul> <ol> <li>Broken out on the extra middle header</li> <li>Not available on the mosaic-X5 GNSS Flex module.</li> </ol> USBUART PortsPPS OutputData LoggingLED OutputsEvent Triggers <p>For most users, this will be the primary interface for the mosaic-X5 module.</p> <p> USB-C connector on the mosaic-X5 GNSS Flex module. </p> <ul> <li>When a module is initially connected to a computer, the board will initialize as a USB mass storage device.<ul> <li>For Windows PCs, the USB driver (1) can be installed from the mass storage device or the RxTools software suite.</li> <li>When the SD card is mounted, this drive will contain the contents of the SD card that is inserted on the board.</li> </ul> </li> <li>Once the USB driver is installed:<ul> <li>Two virtual <code>COM</code> ports are emulated, which can be used as standard <code>COM</code> ports to access the receiver.</li> <li>This interface will support Ethernet-over-USB.<ul> <li>By default, the receiver is not allowed to access the Internet over USB.</li> <li>The IP address allocated to the Ethernet-over-USB interface is <code>192.168.3.1</code>.<ul> <li>The IP address cannot be changed; therefore, only single receiver should be connected to your computer at a time.</li> </ul> </li> </ul> </li> </ul> </li> </ul> <ol> <li>On Linux, the standard Linux CDC-ACM driver is suitable.</li> </ol> <p>The mosaic-X5 has four UARTs ports, which can be operated and configured separately.</p> <p> The UART ports on the mosaic-X5 GNSS Flex module. </p> <ul> <li><code>COM</code> ports 1-3 feature flow control pins, which are disabled by default.</li> <li>These ports also support a point-to-point protocol server, by which it can accept TCP/IP connections over a serial link.</li> </ul> <p>Default Configuration</p> <p>By default, the UART ports are configured with the following settings: </p> <ul> <li>Baudrate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> <p>From the module, the PPS output signal's logic-level is 1.8V. However, for the convenience of users, we have added a buffer and bumped up the signal's logic-level to 3.3V on the mosaic-X5 GNSS Flex module.</p> <p> The <code>PPS</code> signal's output on the mosaic-X5 GNSS Flex module. </p> Use Case <ul> <li>Users could use this signal in conjunction with the event pins to synchronize two mosaic-X5 modules with each other.</li> <li>Users could use this signal to create their own Stratum 0 source for the NTP on a primary time server.</li> </ul> <p>The data logging functionality of the board can be configured through the software/web interfaces.</p> <p> The data logging peripherals on the mosaic-X5 GNSS Flex module. </p> <p>Initial Configuration</p> <p>Before data logging can occur, it is necessary to create a logging stream from the Logging tab of the web interface or using the RxTools software suite. Streams can contain NMEA or SBF (Septentrio Binary Format) data; SBF can contain RTCM and/or RINEX.</p> <p>SD Card Specifications</p> <p>The mosaic-X5 module is only compatible with SD cards of up to 32GB, formatted with a <code>FAT32</code> file system.</p> <p>Standby Mode</p> <p>When Standby mode is initialized, the module terminates all running processes and unmounts the external SD card to avoid any log file corruption (see the Power Modes section).</p> <p>The mosaic-X5 module features two general purpose, output LED pins. These pins have a maximum output current of 10 mA and output impedance of 20\u03a9.</p> <p> The LED pins on the mosaic-X5 GNSS Flex module. </p> <p>The mosaic-X5 module features two general purpose, event input pins. These pins can be used to time tag external events with a time resolution of 20ns.</p> <p> The event pins on the mosaic-X5 GNSS Flex module. </p> Tip <p>For example, these pins can be used in conjunction with the PPS output signal for time syncing.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#extra-header","title":"Extra Header","text":"<p>In addition to the GNSS Flex headers, an extra 2x10 pin, 2mm pitch female header is populated between them. This header breaks out the Ethernet PHY interface, along with a few other operation indication signals.</p> <p></p> <p>The JST connector on the mosaic-X5 GNSS Flex module.</p> <ul> <li> RMII Interface The module supports an Ethernet PHY through its RMII interface. An up-to-date list of supported PHY's can be found in Septentrio\u2019s Knowledge Base. </li> <li> <code>PMIC_ON</code> Pin The state of <code>PMIC</code> pin indicates when the subsystems are energized and ready (see the Power Modes section). </li> <li> <code>READY</code> Pin The <code>RDY</code> pin indicates the operational mode of the mosaic-X5 module (see the Power Modes section). The level is high when module is operating, and low when in standby or reset. </li> <li> <code>ON_OFF</code> Pin The <code>RDY</code> pin indicates the operational mode of the mosaic-X5 module (see the Power Modes section). The level is high when module is operating, and low when in standby or reset. </li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#ufl-connector","title":"U.FL Connector","text":"<p>Users will need to connect a compatible GPS antenna to the <code>ANT1</code> U.FL connector. The type of antenna used with the mosaic-X5 module affects the overall accuracy of the positions calculated by the GNSS receiver.</p> <ul> <li>An active antenna often features a LNA. This allows the module to boost the signal received by the GNSS module without degrading the SNR.</li> <li>The more bands an antenna supports, the greater the performance.<ul> <li>Faster acquisition time.</li> <li>Access and support for the <code>L5</code> GPS band can potentially mitigate multi-path errors.</li> <li>Supporting more frequency bands, allows a GNSS receiver to be less susceptible to jamming and spoofing.</li> </ul> </li> </ul> <p>Tip</p> <p>For the best performance, we recommend users choose a compatible L1/L2/L5/L6 GNSS antenna and utilize a low-loss cable.</p> <p>There are some key parameters related to an antenna that can make or break the signal reception from the satellites. These include the operation frequency, gain, polarization, efficiency and overall loss.</p> <p></p> <p>The U.FL connector to attach an external GNSS antenna to the mosaic-X5 GNSS Flex module.</p> <p>Info</p> <p>The <code>VANT</code> pin provides 3.3V of external power for an active antenna.</p> <p>Danger</p> <p>Never inject an external DC voltage into the SMA connector for the GPS antenna, as it may damage the mosaic-X5 module. For instance, when using a splitter to distribute the antenna signal to several GNSS receivers, make sure that no more than one output of the splitter passes DC. Use DC-blocks otherwise.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/hardware_overview/#jumpers","title":"Jumpers","text":"<p>There are two jumpers on the back of the board that can be used to easily modify the hardware connections on the board.</p> <p></p> <p>The jumpers on the back of the mosaic-X5 GNSS Flex module.</p> Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction!</p> <ul> <li> <p> <p>How to Work with Jumper Pads and PCB Traces</p> <ul> <li> <code>2V8</code> This jumper can be cut to disconnect power to the internal 10MHz TXCO. </li> <li> <code>REF</code> This jumper can be cut to disconnect the 10MHz reference signal from the internal TXCO. </li> </ul> <p></p> <p>The signals from the mosaic-X5 module to the jumpers on the board.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/resources/","title":"Resources","text":""},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/resources/#product-resources","title":"Product Resources","text":"<ul> <li>Product Pages<ul> <li>SparkFun logo SparkPNT GNSS Flex Module - mosaic-X5</li> <li>SparkFun logo SparkFun GNSS Flex pHAT - mosaic-X5</li> </ul> </li> <li> Design Files:<ul> <li> Schematic</li> <li> Board Dimensions</li> <li> KiCad Files</li> <li> STEP File</li> </ul> </li> <li>Component Documentation<ul> <li> mosaic-X5 Datasheet</li> <li> mosaic-X5 Brochure</li> <li> Firmware Manual (v4.14.10.1)</li> </ul> </li> <li> Product Showcase</li> <li> GitHub Repository</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/resources/#additional-resources","title":"Additional Resources","text":"<ul> <li> SparkFun Technical Assistance</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/resources/#manufacturers-resources","title":"\ud83c\udfed\u00a0Manufacturer's Resources","text":"<p>Septentrio also provides great resources for the mossaic-X5 GNSS receiver module:</p> <ul> <li>mosaic-X5 Product Page</li> <li> Septentrio YouTube Channel</li> <li>Support Page<ul> <li> Technical Support Portal<ul> <li> Knowledge Base</li> </ul> </li> <li>Learn More<ul> <li>Webinars</li> <li>Technical Papers</li> <li>Insights (Case Studies and Technical Articles)</li> <li>Community</li> <li>Agnostic Corrections Program</li> </ul> </li> </ul> </li> <li>JammerTest 2023 - Anti-Jamming and Anti-Spoofing Performance</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/software_overview/","title":"Software Overview","text":"<p>Note</p> <p>The mosaic-X5 module has numerous capabilities and a multitude of ways to configure and interface with them. Without regurgitating all the information that is documented in Septentrio's user manuals and videos, we have tried to highlight a good majority of the module's aspects.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/software_overview/#rxtools-software-suite","title":"RxTools Software Suite","text":"<p>Tip</p> <p>Even if you aren't necessarily interested it, we highly recommend that users install the RXTools software suite before plugging in their board. For Windows PCs, it also includes the USB driver for the module that enables the Ethernet-over-USB support and virtual <code>COM</code> ports.</p> <p>Users should install the RXTools software suite on their computer to interact with the mosaic-X5 module through the USB interface. The software package includes the USB-IP driver<sup>1</sup> necessary to recognize the board as an ethernet device on Windows PCs (1).</p> <ol> <li>On Linux, the standard Linux CDC-ACM driver is suitable.</li> </ol> <p> Download the RxTools Software from Septentrio</p> System Requirements<sup>2</sup> Operating SystemsHardware Requirements <ul> <li>Windows 7</li> <li>Windows 8</li> <li>Windows 10</li> <li>Fedora 23 (or later) using Qt technology.<ul> <li>The standalone tools (except <code>bin2asc</code>) will run on older distributions.</li> </ul> </li> </ul> <p>The minimal hardware requirements (1Hz update<sup>3</sup>):</p> <ul> <li>CPU: 1 GHz processor</li> <li>RAM: 1 GB RAM</li> <li>Screen Resolution: 1024\u00d7768 or higher resolution</li> </ul> Installation Instructions<sup>2</sup> WindowsLinux<sup>1</sup> <p>Users can install RxTools software suite by running the installation executable<sup>4</sup>(1), located in the <code>RxTools\\windows</code> directory of the downloaded <code>*.zip</code> file<sup>5</sup>. During the installation process, users will be notified if a previous version of RxTools is already installed then that the previous version will be uninstalled. Next, users will need to provide an installation directory for the RxTools software suite. Users will then select which of the following applications<sup>6</sup> are installed:</p> <ol> <li>For RxTools v22.1.0, the installation filename is <code>RxTools_22_1_0_Installer.exe</code> for Windows PCs.</li> </ol> <ul> <li>RxControl</li> <li>SBF Converter</li> <li>SBF Analyzer</li> <li>RxLogger</li> </ul> <ul> <li>RxUpgrade</li> <li>RxDownload</li> <li>RxPlanner</li> </ul> <ul> <li>Data Link</li> <li>RxAssistant</li> <li>RxLauncher</li> </ul> <p>Warning</p> <p>It is recommended that users NOT install RxControl as <code>root</code>, for security reasons and to avoid installation overwrites of other system settings. To make RxTools available to more than one user, provide a shared installation directory.</p> <p>Users can install RxTools software suite by running the installation binary<sup>4</sup>(1), located in the <code>RxTools/linux-i386/</code> directory of the downloaded <code>*.zip</code> file<sup>5</sup>. During the installation, users will be prompted for an installation directory. If there are any previous installations of RxControl, please use a different directory to avoid conflicts.</p> <ol> <li>For RxTools v22.1.0, the installation filename is <code>RxTools_22_1_0_Installer.bin</code> for Linux.</li> </ol> Permission Settings <p>Once installed, users may need to reconfigure their permission settings:</p> <ul> <li> <p>RxTools will need rights to access the <code>/dev/ttyS*</code> serial ports.</p> <ul> <li> <p>To access the serial ports, users must be part of the <code>uucp</code> and <code>lock</code> groups (1). This can be configured by editing the <code>/etc/group</code><sup>7</sup> file and adding the username to the lines defining the <code>uucp</code> group and the <code>lock</code> group.</p> <p>For example, when adding the user <code>jsmith</code> to the <code>uucp</code> group, users would modify the <code>/etc/group</code> file as shown below:</p> <pre><code>uucp:x:14:uucp # (2)!\nuucp:x:14:uucp,jsmith # (3)!\n</code></pre> </li> <li> <p>On Linux machine administered centrally on a local network, ask your system administrator to be included in the <code>uucp</code> and <code>lock</code> groups.</p> </li> </ul> </li> <li> <p>RxTools also needs read/write (<code>rw</code>) access(4) to the <code>/dev/ttyS*</code> serial ports.</p> <ul> <li> <p>Users can change the permissions with the <code>chmod</code><sup>8</sup> command:</p> <pre><code>chmod 660 /dev/ttyS&lt;add port&gt; # (5)!&gt;\n</code></pre> </li> </ul> </li> </ul> <ol> <li>On most Linux operating systems, the <code>/dev/ttyS*</code> devices are owned by <code>root</code> and belong to the <code>uucp</code> group with read/write (<code>rw</code>) access. Additionally, the devices are normally locked by writing a file in the <code>/var/lock/</code> directory, with the same permissions.</li> <li>Remove</li> <li>Replace with this line</li> <li>By default, users will normally have read/write (<code>rw</code>) access to the <code>/dev/ttyS*</code> serial ports.</li> <li>where users must specify the port numbere.g. <code>/dev/ttyS0</code> might be port <code>COM1</code></li> </ol> <p>Note</p> <p>In order for these changes to take effect, users must update their environment by logging out and back in.</p> <p>Be aware that the X-session has to be restarted as well. On most systems, this can be done by pressing the key combination Ctrl + Alt + Backspace</p> 64-bit OS <p>In order to run the RxTools on a 64-bit Linux operating system, users might to install the 32-bit version of the <code>C</code> standard library.</p> <ul> <li>For Fedora installations, this is the <code>glibc.i686</code> package.</li> <li>The equivalent for Debian(/Ubuntu) installations is the <code>ia32-libs</code> package.</li> </ul>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/software_overview/#usb-driver","title":"USB Driver","text":"WindowsLinux <p>If users haven't already installed the RxTools software suite on their Windows PC, they will need to install the USB driver<sup>1</sup> necessary to recognize and interact with the mosaic-X5 module through the USB interface.</p> <p>A Windows USB driver for the mosaic-X5 can be installed through two methods:</p> <ul> <li>RxTools Software Suite (1)</li> <li>mosaic-X5 GNSS Receiver Module (2)</li> </ul> <ol> <li>The driver is installed during the installation process.</li> <li>The installation file for the Windows USB driver will be available from the mass-storage device when the board is initially connected to the computer.</li> </ol> <p>Once installed, the driver emulates two virtual serial ports, which can be accessed as standard <code>COM</code> ports to the receiver.</p> Terminal Emulators <p>Most terminal emulation programs will not make a distinction between virtual or native COM ports. However, for virtual serial ports, the port settings (i.e. baudrate, etc.) are not relevant and the default configuration be used in the terminal emulation program. However, for the physical/native <code>COM</code> ports will have the following default setting: </p> <ul> <li>Baudrate: 115200bps</li> <li>Data Bits: 8</li> <li>Parity: No</li> <li>Stop Bits: 1</li> <li>Flow Control: None</li> </ul> Having Trouble? <p>For users who are having trouble installing the USB driver, we have an archived version (v3.0.2<sup>9</sup>) of the installation file. Users can download version 3.0.2 of the driver, by clicking on the button below.</p> <p>  Download USB Driver (v3.0.2) </p> <p>On Linux, the standard Linux CDC-ACM driver is suitable.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/software_overview/#web-interface","title":"Web Interface","text":"<p>With the USB driver installed, the mosaic-X5 module supports Ethernet-over-USB. The default IP address allocated for the Ethernet-over-USB interface is <code>192.168.3.1</code>. This IP can be entered in any browser to open a connection to the receiver's Web Interface as shown below.</p> <p></p> <p>All the drop-down navigation tabs in the web interface.</p> <p></p> <p>Info</p> <p>The default IP address cannot be changed; this feature is only to be used when a single receiver is connected to your computer.</p> Invalid IP Address (WiFi Only) <p>One of the documentation pages on Septentrio's website, specifies a default IP address of <code>192.168.20.1</code> for the web interface. However, that address is for a WiFi enabled product and cannot be used with this product.</p> <ol> <li> <p>On Linux, the standard Linux CDC-ACM driver is suitable.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>The system requirements and installation instructions are from the RxTools v22.1.0 user manual. This information may change in later iterations of the software suite. Please refer to the user manual (of the version you are utilizing) for the most accurate information.\u00a0\u21a9\u21a9</p> </li> <li> <p>Higher data rates will require higher CPU speed and more memory capacity.\u00a0\u21a9</p> </li> <li> <p>Users will need administrative privileges to install the RxTools software.\u00a0\u21a9\u21a9</p> </li> <li> <p>Users may need to extract the RxTools installation files from the downloaded, compressed file.\u00a0\u21a9\u21a9</p> </li> <li> <p>Please see the release notes for the issues and limitations of the RxTools applications.\u00a0\u21a9</p> </li> <li> <p>Requires c privileges.\u00a0\u21a9</p> </li> <li> <p>Changing these permissions also requires <code>root</code> privileges.\u00a0\u21a9</p> </li> <li> <p>For the latest USB driver from Septentrio, please install their driver through the RxTools software suite. This is driver version, was archived at the time that this guide was written. Please do not request for the file to be updated. \u21a9</p> </li> </ol>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/troubleshooting_tips/","title":"Troubleshooting Tips","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun GNSS Forum is a great place to ask questions.</p> <p>Account Registration Required</p> <p>If this is your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/troubleshooting_tips/#electrostatic-discharge","title":"Electrostatic Discharge","text":"<p>The mosaic-X5 module is sensitive to ESD. Use a proper grounding system to make sure that the working surface and the components are at the same electric potential.</p> <p>ESD Precaution</p> <p>As recommended by the manufacturer, we highly recommend that users take the necessary precautions to avoid damaging their module.</p> <p> </p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/troubleshooting_tips/#usb-driver","title":"USB Driver","text":"<p>A USB driver is only required for Windows PCs (see the USB Driver section).</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/troubleshooting_tips/#gps-antenna","title":"GPS Antenna","text":""},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/troubleshooting_tips/#power-input","title":"Power Input","text":"<p>Active Antenna</p> <p>Never inject an external DC voltage into the SMA connector for the GPS antenna, as it may damage the mosaic-X5 module. For instance, when using a splitter to distribute the antenna signal to several GNSS receivers, make sure that no more than one output of the splitter passes DC. Use DC-blocks otherwise.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/troubleshooting_tips/#supported-frequency-bands","title":"Supported Frequency Bands","text":"<p>For the best performance, we recommend users choose a compatible L1/L2/L5/L6 GNSS antenna and utilize a low-loss cable. Utilizing an antenna that doesn't match all the supported frequency bands of the mosaic-X5, will result in reduced performance and capabilities.</p>"},{"location":"SparkPNT_GNSS_Flex_Module_mosaic-X5/troubleshooting_tips/#data-logging","title":"Data Logging","text":"<p>For data logging issues, here are some simple troubleshooting tips:</p> <ul> <li>Make sure that your SD card is formatted to a <code>FAT32</code> file system.<ul> <li>The <code>FAT32</code> file system also limits the maximum capacity of the card to less than 32GB (i.e. a 256GB SD card will not work).</li> </ul> </li> <li>Make sure that the mosaic-X5 module has a configured data stream output.</li> <li>Use the mosaic-X5 web page to verify that the SD card is mounted as a storage drive.</li> </ul>"},{"location":"github/contribute/","title":"Contribute","text":""},{"location":"github/contribute/#make-an-augmentation","title":"Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun GNSS Flex System repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>/Hardware</code> directories of the SparkFun GNSS Flex System repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Submit Issues","text":""},{"location":"github/file_issue/#need-assistance","title":"Need Assistance?","text":"<p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#did-we-make-a-mistake","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun GNSS Flex System repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>/Hardware</code> directories of the SparkFun GNSS Flex System repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}